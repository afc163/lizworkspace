

(15时20分07秒) liz: 就像 MAIL_LIST=$(head -n 1 mail.conf)这种，我现在用的方法的确可以获取mail.conf，但这个是不需要的

(15时26分06秒) 蔡俊杰gtalk: 这个file_handle写的不是太好，你应该对预计需要处理的情况进行一个if条件处理，比如sh改怎么处理，留个扩充的余地，if perl脚本该怎么处理，if c程序改怎么处理


(15时59分26秒) 蔡俊杰gtalk: 提个小小建议，一般写类都加个继承object   


(16时06分25秒) 蔡俊杰gtalk: 最好能用英文输出


(16时10分38秒) 蔡俊杰gtalk: 被调用文件类型：.txt --> 文件名称：文件名：/home/mp3/mp3db/./static/links.sort.txt，是否存在：yes
                        行号：[12, 13]
                        是否存在：yes

(16时10分48秒) 蔡俊杰gtalk: 你看/home/mp3/mp3db/./static/li
(16时11分04秒) 蔡俊杰gtalk: 当前目录  ./你应该就不解析了

(16时19分47秒) 蔡俊杰gtalk: 比如还是刚才的file_handle函数
(16时19分50秒) liz: 似的，那比如说你之前要提取参数，提取什么参数呢，c程序的提取，那么其他的要不要呢
(16时20分01秒) 蔡俊杰gtalk: 你用try  except来捕获要处理的sh脚本
(16时20分15秒) 蔡俊杰gtalk: 如果不是sh脚本那你就pass掉了
(16时20分29秒) 蔡俊杰gtalk: 你把情况就定格死了
(16时20分43秒) 蔡俊杰gtalk: 对你来说，就2种情况
(16时20分45秒) liz: 难道还要扩展去处理其他类型的
(16时20分54秒) 蔡俊杰gtalk: 万一，我现在提个需求
(16时21分16秒) liz: 那我又不知道你还要去处理，所以我说吗，这不又得重新改了
(16时22分12秒) 蔡俊杰gtalk: 这些都是技巧和方法问题，不是你编程不行，而是可能没经历过，所以我们才会有这样的经过，你不需要指望一步到位，不可能的拉

(16时23分00秒) 蔡俊杰gtalk: 你应该反过来想想，如何使你的代码再往前推进的时候，回来修改扩展也是件很容易的事情

(16时25分46秒) 蔡俊杰gtalk: 有一个办法，你不妨去往上找找相关的源代码环境
(16时25分59秒) 蔡俊杰gtalk: 这也是一种能力哦
(16时26分06秒) 蔡俊杰gtalk: 我可以提供个平台
(16时26分31秒) 蔡俊杰gtalk: code.google.com中你搜索shell，应该有很多项目吧
(16时26分53秒) 蔡俊杰gtalk: 另外还有个平台  www.krugle.com

(16时28分24秒) 蔡俊杰gtalk: 是的，你随便找个项目，以shell脚本开发语言的项目
(16时28分34秒) 蔡俊杰gtalk: 我又找到个bug

(16时41分09秒) 蔡俊杰gtalk: 被调用文件类型：.c --> 文件名称：文件名：/home/mp3/mp3db/{3/bak/l，是否存在：no
                        行号：[36, 49]
                        是否存在：no

(16时42分42秒) 蔡俊杰gtalk: wget 的 参数就不解析了
(16时43分21秒) liz: 那里面的ftp是要的吧
(16时43分27秒) liz: ftp路径

(16时44分07秒) 蔡俊杰gtalk: 这样吧，降低复杂度
(16时44分22秒) 蔡俊杰gtalk: wget，我给个建议这样来处理
(16时44分51秒) 蔡俊杰gtalk: 如果wget后面有参数-O -N 只要有-
(16时44分54秒) 蔡俊杰gtalk: 开头
(16时44分58秒) 蔡俊杰gtalk: 那么一律不解析
(16时45分03秒) 蔡俊杰gtalk: 不要提取ftp路径了
(16时45分19秒) 蔡俊杰gtalk: 如果没有任何参数，提取下ftp路径，你觉得呢？
(16时46分05秒) liz: ftp路径若是变量名，我现在可以提取，但是上述那种情况是因为变量名又包含个变量了，所以不行
(16时47分17秒) 蔡俊杰gtalk: 那这样，如果你有不能解析的就不要解析错误的东西出来，可以不显示，或者不记录了


(17时29分23秒) 蔡俊杰gtalk: 似乎./的路径问题还是没有处理好

(17时29分36秒) 蔡俊杰gtalk: 105 >> Filename: /home/mp3/mp3db/./static/sites.txt    Exist: yes
(17时33分29秒) liz: 这个测试文件中的./static是怎么写的
(17时34分18秒) 蔡俊杰gtalk: 你是在变量有./的情况下没有处理
(17时34分22秒) 蔡俊杰gtalk: HOMEPATH="./"
DESPATH="./static"

(17时35分39秒) 蔡俊杰gtalk: 第二个bug
(17时36分32秒) 蔡俊杰gtalk: #!/bin/bash
usage()
{
    #usage
    echo
    echo "Usage :  `basename $0` inputfile appendval outputfile"
    echo "example: `basename $0` urllist.src.txt 1 urllist.src.txt.1"
    echo "try again, pls :)"
    echo 
    exit 1
}

这样一个脚本，应该是不需要提取什么东西的，但目前的pr.py会解析出一个urllist.src.txt文件出来
(17时36分53秒) liz: 我是先把变量替换了，然后用getabspath处理新的路径字符串，难道是这种情况$a/$b a=/home/ b=./cc
(17时37分07秒) liz: 这个我改
(17时37分37秒) 蔡俊杰gtalk: //或者/./都只要变成/即可


(17时39分13秒) 蔡俊杰gtalk: 没有这个必要嘛，因为，第一，配置文件一般都是加在变量中 即a="b.conf" 你才需要提取

(17时40分05秒) 蔡俊杰gtalk: 第二  c程序提取你可以   ./a 来判断   或者   a （主要这种情况下 which a 一下，以便确定其存在）

(17时40分41秒) 蔡俊杰gtalk: 第三，脚本的提取你可以   ./aaa.sh 一行的行开始

(17时41分59秒) 蔡俊杰gtalk: 当然你为了简单，可以提取./a 这种情况
(17时42分10秒) 蔡俊杰gtalk: 你先只要./a 这种哦功能情况吧

(17时44分06秒) 蔡俊杰gtalk: 你简单起见吧，就解析    ./a   这种情况   对于a   统统不解析

(17时45分52秒) 蔡俊杰gtalk: 另外，脚本编写有一个规范  ，即全部以 ./来执行脚本或者程序   ，比如一个hello.sh  或者  hello程序，那么，这样运行：
./hello.sh
./hello
(17时46分10秒) 蔡俊杰gtalk: 这里面也涉及到一些编程规范

(17时48分08秒) 蔡俊杰gtalk: 记得  想   一行如果以  a 开头的都不用解析
(17时48分45秒) 蔡俊杰gtalk: 这样：
cp /home/mp3/a  /home/mp3/mp3db/b
这种情况就可以忽略了，这才是想要的
(17时48分45秒) liz: 好的，之考虑那些sh, python, perl的
(17时48分54秒) 蔡俊杰gtalk: 等等
(17时49分00秒) 蔡俊杰gtalk: sh还是要的
(17时49分05秒) 蔡俊杰gtalk: 如果sh a.sh
(17时49分13秒) 蔡俊杰gtalk: 那么这个sh是要提取出来的
(17时49分28秒) 蔡俊杰gtalk: python py.py，那么这个python这样也要
(17时49分38秒) 蔡俊杰gtalk: perl a.pl，这个a.pl也要
(17时49分50秒) liz: 恩，其实就是因为这个情况，我才直接在一行中提取的
(17时49分55秒) 蔡俊杰gtalk: c程序就没有这种情况

(17时52分16秒) liz: 一个是path那边，一个txt提取有些地方不需要
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
(17时52分19秒) 蔡俊杰gtalk: 你对get_new_data.sh依然没有解析好
(17时52分55秒) 蔡俊杰gtalk: Shell Files: Filename: /home/mp3/mp3db/get_new_data.sh -->
File Type: .sh --> Filename: /home/mp3/mp3db/data/get_new_data.sh
                        Line Number: [107]
                        Exist: no

(17时53分01秒) 蔡俊杰gtalk: 107行有这种情况
(17时53分27秒) 蔡俊杰gtalk: 说明，你是对一行中只要有.sh这种字符串都提取了
(17时53分32秒) 蔡俊杰gtalk: 实际上这是错误的
(17时54分10秒) 蔡俊杰gtalk: .sh 或者.pl或者.py被提取的情况当且仅当 
(17时54分31秒) 蔡俊杰gtalk: ./ 或者   /home/mp3db  或者  ./home/mp3/开头
(17时54分38秒) 蔡俊杰gtalk: 豆面跟一个脚本名字
(17时54分45秒) 蔡俊杰gtalk: 或者sh 开头才被解析
(17时54分58秒) 蔡俊杰gtalk: 不是一行中主要有.sh或者.pl都要解析的
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
(17时58分03秒) 蔡俊杰gtalk: 上面3个记下了？ 我说第四个bug了

(17时59分58秒) 蔡俊杰gtalk: 依然从get_new_data.sh中反应的情况，需要对wget中提取的信息增加一个File Tye为 ftp 标记，比如
(18时00分09秒) 蔡俊杰gtalk: File Type: .txt --> Filename: tc-forum-se00.tc.baidu.com//home/forum/mp3miner/data/mp3forum.txt
                        Line Number: [29]
                        Exist: no

(18时00分27秒) 蔡俊杰gtalk: 这里如果可以，不要以 File Type：.txt
(18时01分00秒) 蔡俊杰gtalk: 变成 File Type：ftp=>.txt会更易读
(18时01分08秒) liz: 哦，这个我之前想到了，要不要做个标记，这个好办的
(18时01分21秒) 蔡俊杰gtalk: 当然Exist也就不需要去判断了

(18时01分32秒) 蔡俊杰gtalk: 因为本地目录是不可能有的

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
(19时28分21秒) 蔡俊杰gtalk: 第5个bug了

(19时30分58秒) 蔡俊杰gtalk: 注释你在程序中也翻译了
(19时31分12秒) 蔡俊杰gtalk: 比如
#./curllist.sh $_DX_DATAPATH/crawler_url.txt 1 $TEMPFILE1
#mv $_DX_DATAPATH/crawler_url.txt $_DX_DATAPATH/crawler_url.txt.bak
#mv $TEMPFILE1 $_DX_DATAPATH/crawler_url.txt
#./curllist.sh $_DX_DATAPATH/pscache.txt 1 $TEMPFILE1
#mv $_DX_DATAPATH/pscache.txt $_DX_DATAPATH/pscache.txt.bak 
#mv $TEMPFILE1 $_DX_DATAPATH/pscache.txt

(19时31分24秒) 蔡俊杰gtalk: 这种情况下是不需要在解析的
(19时31分53秒) liz: .txt什么情况下要解析，就是说提取什么样的.txt
(19时32分28秒) 蔡俊杰gtalk: 恩，一本txt文件是在wget才会使用
(19时32分32秒) 蔡俊杰gtalk: 一般

(19时33分09秒) 蔡俊杰gtalk: 你先考虑提取wget后面的txt，其它情况下的txt暂时不考虑

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
(19时35分05秒) 蔡俊杰gtalk: 第六个bug
(19时35分17秒) 蔡俊杰gtalk: 脚本被调用，记录的位置有问题
(19时35分20秒) 蔡俊杰gtalk: 比如
(19时35分40秒) 蔡俊杰gtalk: File Type: .txt --> Filename: /home/mp3/mp3db/forum_mp3/mp3forum.txt
                        Line Number: [11, 11, 12]
                        Exist: yes

File Type: .txt --> Filename: /home/mp3/mp3db/bar_mp3/barmp32.txt
                        Line Number: [17, 17, 18]
                        Exist: yes

(19时36分15秒) 蔡俊杰gtalk: 怎么会同一行出现2次呢，对于非脚本，就不需要记录了，设为空吧
(19时36分46秒) liz: 哦，不记录行号


(19时39分00秒) 蔡俊杰gtalk: 现在你脚本中中记录了sh perl python c程序 conf配置文件  txt文件的信息

(19时41分51秒) 蔡俊杰gtalk: 你现在有上述6种类型的记录
(19时42分01秒) 蔡俊杰gtalk: 是否还有对路径记录的支持？

(19时42分21秒) 蔡俊杰gtalk: 比如我查get_new_data.sh，你能方便的给出这个脚本关联的路径
(19时42分28秒) 蔡俊杰gtalk: 有么？

(19时43分17秒) 蔡俊杰gtalk: 我查get_new_data.sh，能给出这个脚本所关联的子脚本，程序，这个有么？
(19时43分55秒) 蔡俊杰gtalk: 输入数据get_new_data.sh，参数是script，你能输出数据 是其相关的脚本
(19时43分59秒) 蔡俊杰gtalk: 这个功能有么？

(19时44分19秒) 蔡俊杰gtalk: 如果没有，如果实现，代价高么？
(19时44分29秒) 蔡俊杰gtalk: 比如

(19时45分35秒) 蔡俊杰gtalk: 何为有关系，无非是一个脚本调用另一个脚本
(19时45分39秒) 蔡俊杰gtalk: 不要想的太复杂

(19时47分44秒) 蔡俊杰gtalk: 恩，但我们目前再做的是进一步分析
(19时48分47秒) 蔡俊杰gtalk: 如果我给你2个参数，脚本名字和脚本类型，才能返回给我想要的东西

(19时49分22秒) 蔡俊杰gtalk: get_new_data.sh，参数是script，意思是告诉人们，这个get_new_data.sh调用了哪些脚本
(19时49分42秒) 蔡俊杰gtalk: 你现在做的这个工具把所有的都分析出来了

(19时50分04秒) 蔡俊杰gtalk: 这个是基础
(19时50分17秒) 蔡俊杰gtalk: 我们下一步工作是开始存数据库了
(19时50分45秒) 蔡俊杰gtalk: 所以我想知道你整个结构对哪些文件类型处理了，上述是6中类型的跟踪记录

(19时50分50秒) liz: 那这个实现只要对数据库表进行过滤就可以了

(19时51分07秒) 蔡俊杰gtalk: 还有1种，需要记录某个脚本关联的路径，这个你没有给出
(19时51分23秒) liz: 哦，路径要保存下来

(19时51分41秒) 蔡俊杰gtalk: 一个脚本关联的路径也要保存下来
(19时53分15秒) 蔡俊杰gtalk: 开发人员在看的是否，更关注的是一个全局概念，即这个脚本和哪些目录有关系，他一看，和a有关，和b有关，哦，就知道，以后如果我要再另一台机器上搭建一个检索环境，起码要copy这几个目录过去
(19时53分44秒) 蔡俊杰gtalk: 随着系统的大而复杂，这种关系是记不住的，需要经常性的查阅系统

(19时55分10秒) 蔡俊杰gtalk: 所以、这个工具的目的就是帮助程序人员尽可能多而准确的记录脚本之间的相关关系

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
我: 但是这个cd 错误的路径不是还要标出来的吗
 蔡俊杰gtalk: 不需要了
23:50 不需要标记出
  路径不需要判断是否已经存在
23:51 判断是否存在的文件实际上只需要3种，一是conf配置文件，二是脚本、三是程序
 我: 那你之前说要判断的。。。
 蔡俊杰gtalk: 阿
23:52 路径只需要记录，不需要判断是否存在阿
  这样吧，我还是记录下来吧，你任何修改最好按照设计文档
  以免当中存在问题
23:53 我: 好～
23:54 蔡俊杰gtalk: 这个问题你，明白了么？ 哪里不清楚，你可以问我
23:55 还是那样，写程序前哪怕一点点的一点点你不是太清楚，或者有一点点模糊，一定要问，千万，因为因为我已经碰过好多次壁了 ：P
  所以我才这么告诉你
23:56 我: cd $a; ./some.sh这个若$a变量没有，那么some.sh的路径就是错的，这个脚本肯定不存在吧，这样子该如何处理
23:57 蔡俊杰gtalk: 这种情况不考虑
23:58 如果你发现cd 后面的路径出错，我教你个方法，你直接异常，跳过这个语句
  因为，假设这个pr.py分析的是一个完整的系统，即不会出现语义错误的脚本
23:59 但是cd到某个目录以后，./some.sh这个脚本时候，你就要记录了，看看这个脚本是否存在
 我: 恩，所以那边不可能出现死循环那
 蔡俊杰gtalk: 如果没有存在就记录下来
  为什么需要这种情况呢
  我解释下
0:01 因为，脚本不存在是可能的，因为开发人员在迁移环境的时候往往会遗漏某个脚本，但遗漏一个目录是不大会出现的，一旦目录丢失，整个系统运行不起来，但一个脚本丢失，系统还能运行，但会出错误结果
  (00时01分10秒) shengyan: 恩，所以那边不可能出现死循环那

我不知道哪里出错，但程序无法正常退出
0:02 我: 哦，我知道了，我改～
 蔡俊杰gtalk: 发现出错的地方
  还是我给你个catch.sh脚本
  你先前测试过了么？
0:03 我: 还有.txt除了wget中提取，其他地方要不要
  没有，明天我测试看
 蔡俊杰gtalk: 恩
  不需要了
0:04 我: .conf普通的行中要不，你说一般是在变量名中出现的，对吧
 蔡俊杰gtalk: conf文件是不解析的
0:05 我: 那就是不要提取了？
 蔡俊杰gtalk: (00时05分45秒) shengyan: .conf普通的行中要不，你说一般是在变量名中出现的，对吧

我不明白你的意思
  我再解释以下吧
  需要解析的文件是以sh结尾的文件
0:06 解析的目的是提取conf shell pl python c 程序的绝对路径
  判断他们是否存在
 我: 要提取.conf文件，除了在变量名中出现的外，其他行要不要提取.conf文件
 蔡俊杰gtalk: wget记录 远程的主机名，并记录路径
0:07 需要
  但注释行不需要提取
  echo 行不需要提取
  其它都要
 我: 哦
0:08 蔡俊杰gtalk: 比如 echo "a.conf is wrong"
  这个就不提取了
 我: 我知道
0:09 蔡俊杰gtalk: 你给我的这个版本是不可运行的，大概知道哪里有问题么？
 我: doll_handle里面
0:10 蔡俊杰gtalk: 哦
 我: 我忘了考虑变量不存在的情况下，只需在while条件加个num<self.line_num就可以了
0:11 蔡俊杰gtalk: 第几行？
  我来修改下看看
0:12 我: 152
  142
0:13 蔡俊杰gtalk: 两个都要改还是只改一个
  改成什么？
 我: 两个地方，while ('$' in temp_replace) and (num<self.line_num):
0:14 蔡俊杰gtalk: y依然出错
  这样吧，你再好好看看脚本
  不急
 我: 这个是我考虑了变量中又有变量的情况
  哦
 蔡俊杰gtalk: 重在逻辑清晰
0:15 实际上变量又有变量的情况很简单的
  你扫描每一行的时候把变量都记录下来
  碰到一个$就代替不就完成了么？
0:16 shell脚本是顺序执行的 必须$a先定义，后面的$a才有内容
