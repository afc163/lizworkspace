== NP-complete ==
A problem is easy if it can be solved by an efficient algorithm, perhaps an algorithm with polynomial-time complexity. Conversely, if a problem cannot be solved by any polynomial-time alforithm, it must be a difficult problem.

== Time-complexity functions ==
\log < n < n\log < n^2 < 2^n < n!

== staight insertion sort ==
Best Case: 2(n - 1) = O(n)
Average Case: \frac{1}{4}(n+8)(n-1) = O(n^{2})
Worst Case: \frac{1}{2}(n-1)(n+4) = O(n^{2})

== Binary Search ==
Best Case: O(1)
Average Case: O(log n)
Worst Case: O(log n)

== Straight selection sort ==
Best Case: O(1)
Average Case: O(nlog n) 这三个都是O(n^{2})
Worst Case: O(n^{2})

== Quichsort(f,l) ==
Input: a_f, a_{f+1}, ..., a_l
if f \gte l then return
x = a_f
i = f+1
j = l
while i <j {
    while a_j \gte X and j \gte f+1 {
        j -= 1
    }
    while a_i \lte X and i \lte l {
        i += 1
    }
}
a_f \leftrightarrow a_j
Quicksort(f, j-1)
Quicksort(j+1, l)

== Quichsort(f,l) ==
Input: a[f], a[f+1], ..., a[l]
if f >= lthen return
x = a[f]
i = f+1
j = l
while i <j  {
    while a[j] >= X and j >= f+1 {
        j -= 1
    }
    while a[i] <= X and i <= l {
        i += 1
    }
}
a[f] <-> a[j] // 交换
Quicksort(f, j-1)
Quicksort(j+1, l)

时间复杂度
Best Case: O(nlog n)
Average Case: O(nlog n)
Worst Case: O(n^{2})


== Heap sort ==




1) 有些公司面试的时候会问：知道怎么不用中间变量实现swap(a,b)吗？
a ^= b //a=a^b, b=b
b ^= a //a=a^b, b=(a^b)^b=a
a ^= b //a=(a^b)^a=b, b=a

2) 有一组数字，从1到n，中减少了一个数，顺序也被打乱，放在一个n-1的数组里，设计算法在O(n)时间O(1)空间内找出丢失的数字！
从1到n异或一遍，再从从数组里面异或一遍，最后的值就是那个丢失的数字

## 或者是直接求1到n的和减去数组中的数的和, 或者 直接求1到n的乘积除以数组中的数的乘积. 这是利用了"不变量". 构成x+y = a, x*y = b的二元一次方程, 或者还可以使用其他的函数, 比如平方和, 这种方式下, 多个数组同时找缺失数字也可以用同样的方法.

3)
   1. 给你n个数，其中有且仅有一个数出现了奇数次，其余的数都出现了偶数次。用线性时间常数空间找出出现了奇数次的那一个数。
   2. 给你n个数，其中有且仅有两个数出现了奇数次，其余的数都出现了偶数次。用线性时间常数空间找出出现了奇数次的那两个数。

答案：

   1.从头到尾异或一遍，最后得到的那个数就是出现了奇数次的数。这是因为异或有一个神奇的性质：两次异或同一个数，结果不变。再考虑到异或运算满足交换律，先异或和后异或都是一样的，因此这个算法显然正确。
>>> 1^2^3^1^3
2
>>> 3^3
0
>>> 3^3^3
3
   2.从头到尾异或一遍，你就得到了需要求的两个数异或后的值。这两个数显然不相等，异或出来的结果不为0。我们可以据此找出两个数的二进制表达中不同的一位，然后把所有这n个数分成两类，在那一位上是0的分成一类，在那一位上是1的分到另一类。对每一类分别使用前一个问题的算法。

x & -x 获得的是1的最低位


== Kruskal's mininum spanning tree algorithm ==  
最小生成树, 无向图,,选边的方法, 里面如何判断是否构成环比较麻烦
text{{{
Input: A weighted, connected and undirected graph G = (V, E).
Output: A minimum spanning tree for G.
    T := \varnothing
    While T contains less than n - 1 edges do
    Begin
        Choose an edge(v,w) from E of the smallest weight
        Delete (v,w) from E
        If (the adding of (v,w) to T does not create a cycle in T) then
            Add (v,w) to T
        Else
            Discard (v,w)
    End
}}}

== The basic Prim's algorithm to find a minimum spanning tree == 
选点.
text{{{
Input: A weighted, connected and undirected graph G = (V, E).
Output: A minimum spanning tree for G.
Step 1: Let x be any vertex in V. Let X = {x} and Y = V - {x}.
Step 2: Select an edge (u,v) from E such that u \in X, v \in Y and (u,v) has the smallest weight among edges between X and Y.
Step 3: Connect u to v. Let X = X U {v} and Y = Y - {v}.
Step 4: If Y is empty, terminate and the resulting tree is a minimum spanning tree. Otherwise, Go to Step 2.
}}}

详细点的
text{{{
Step 1: Let X = {x} and Y = V - {x} where x is any vertex in V.
Step 2: Set C_1(y_j) = x and C_2(y_j) = \infty for every vertex y_j in V.
Step 3: For every vertex y_j in V, examine whether y_j is in Y and edge(x, y_j) exists. If y_j is in Y, edge(x,y_j) exists and w(x, y_j) = b < C_2(y_j), set C_1(y_j) = x and set C_2(y_j) = b; otherwise, do nothing.
Step 4: Let y be a vertex in Y such that C_2(y) is minimum. Let z = C_1(y)(z must be in X). Connect y with edge (y, z) to z in the partially constructed tree T. Let X = X + {y} and Y = Y - {y}. Set C_2(y) = \infty .
Step 5: If Y is empty, terminate and the resulting tree T is a minimun spanning tree; otherwise, set x = y and go to Step 3.
}}}

== Dijkstra's single source shortest paths ==
text{{{
Input: A directed graph G = (V, E) and a source vertex v_0. For each edge (u, v) \in E, there is a non-negative number c(u, v) associated with it. |V| = n + 1.
Output: For each v \in V. the length of a shortest path from v_0 to v.
    S := { v_0 }
    For i:= i to n do
    Begin
        if (v_0, v_i) \in E then
            L(v_i) := c(v_0, v_i)
        else:
            L(v_i) := \infty
    End
    For i := 1 to n do
    Begin
        Choose u from V - S such that L(u) is the smallest
        S := S \cup { u } /* Put u into S */
        For all w in V - S do
            L(w) := min(L(w), L(u) + c(u,w))
    End
}}}
O(n^2)

== Linear merge algorithm ==
text{{{
Input: Two sorted lists, L_1 = (a_1, a_2, ..., a_{n_1}) and L_2 = (b_1, b_2, ..., b_{n_2}).
Output: A sorted list consisting of elements in L_1 and L_2;
    Begin
        i := 1
        j := 1
        do
            compare a_i and b_j
            if a_i > b_j then output b_j and j := j+1
            else output a_i and i := i+1
        while ( i \leq n_1 and j \leq n_2)
        if i > n_1 then output b_j, b_j+1, ..., b_{n_2},
        else output a_i, a_i+1, ..., a_{n_1}.
    End.
}}}
多路归并的话, 可以看成是一棵树, 归并时统计元素比较次数, 越少越好, 那么如果看成是一颗二叉树, 树的深度应该越少越好. 每个数组比较次数为d_i*n_i, d_i为数组i的在二叉树中的深度, n_i为数组元素个数.
text{{{
A greedy algorithm to generate an optimal 2-way merge tree
Input: m sorted lists, L_i, i=1,2, ..., m, each L_i consisting of n_i elements.
Output: An optimal 2-vay merge tree.
Step 1: Generate m trees, where each tree has exactly one node (external node) with weight n_i.
Step 2: Choose two trees T_1 and T_2 with minimal weights.
Step 3: Create a new tree T whose root has T_1 and T_2 as its subtrees and weight is equal to the sum of weights of T_1 and T_2.
Step 4: Replace T_1 and T_2 by T.
Step 5: If there is only one tree left, stop and return; otherwise, go to Step 2.
}}}
这个过程: 依次选择最小的两棵树归并, 新的树替代这两棵, 重复找. 和构建huffman树(这树加上0, 1编码就可以得到对应的编码了)类似. 顺便回忆一下huffman编码, 使用频率最为权值, 最频繁的应该位于树根部, 对应的编码长度应该较小, 而频率低的则靠树叶子节点, 对应的编码长度相对较长.


== 电梯调度算法 ==
电梯停在哪一层, 使得乘客爬楼梯的层数之和最少.
这是最简单的枚举算法.O(N^2)
{{{
    int nPerson[];    // nPerson[i]表示到第i层的乘客数目
    int nFloor, nMinFloor, nTargetFloor;
    
    nTargetFloor = -1;
    for (i=1; i<=N; i++) {
        nFloor = 0;
        for (j=1; j<i; j++) nFloor += nPerson[j]*(i-j);
        for (j=i+1; j<=N; j++) nFloor += nPerson[j]*(j-i);
        
        if(nTargetFloor == -1 || nMinFloor > nFloor){
            nMinFloor = nFloor;
            nTargetFloor = i;
        }
    }
}}}
考虑在i层时, 乘客在i层下N1, 在i层N2, 在i层上N3的数目, 调整这个计算. 依次遍历1层到顶层时, 更新这N1, N2, N3三个值.
{{{
    int nPerson[];
    int nMinFloor, nTargetFloor;
    int N1, N2, N3;
    
    nTargetFloor = 1;
    nMinFloor = 0;
    for (N1=0,N2=nPerson[1],N3=0,i=2; i<=N; i++){
        N3 += nPerson[i];
        nMinFloor += nPerson[i] * (i-1);
    }
    for (i=2; i<=N; i++){
        if (N1 + N2<N3){
            nTargetFloor = i;
            nMinFloor += (N1 + N2 - N3)
            
        }
    }
}}}

== 关于数字 ==
一个数的二进制串中1的个数, 
{{{
    int Count(int v){ // 最简单的除余
        int num = 0;
        while (v){
            if (v%2 == 1){
                num++;
            }
            v /= 2;
        }
        return num;
    }
}}}
位操作/减法
{{{
    int Count(int v){
        int num = 0;
        while (v){
            /*num += v & 0x01;
            v >>= 1;*/
            v &= (v-1);
            num++;
        }
        return num;
    }
}}}
找N!中0的个数, 2*5=10, 转换为1到N中, 5的个数.
{{{
    ret = 0;
    for (i=1; i<=N; i++){
        j = i;
        while (j%5 == 0){
            ret++;
            j /= 5;
        }
    }
}}}

{{{
    ret = 0;
    while(N){
        ret += N/5;
        N /= 5;
    }
}}}
N!的二进制表示中最低位1的位置.N/2 + N/4 + N/8+N/16, ... ps N/k等于1,2,3,...,N中能被k整除的数的个数.
{{{
    ret = 0;
    while(N){
        N >>= 1;
        ret += N;
    }
}}}
查找一系列数中, 超过一半的数字.
{{{
    int nTimes, i;
    for (i=nTimes=0; i<N; i++){
        if (nTimes == 0){
            candidate = ID[i], nTimes = 1
        } else {
            if candidate == ID[i] nTimes++;
            else nTimes--;
        }
    }
    return candidate;
}}}


