存在问题
无法处理程序异常



学习  动态链接库
（1）动态链接库（Dynamic Link Library,DLL）是一种编译过的可执行代码模块，后缀名为.DLLL
可以在应用程序中或其他DLL中被调用。在Windows环境中，DLL可以实现多个应用程序共享代码
和资源。DLL程序本身不能运行，它需要一个如出口函数。在使用DLL的情况下,当建立应用程序的
可执行文件时,不必将DLL链接到程序中,而是在应用程序运行时动态的装入DLL,装载时,DLL将被映
射到进程的地址空间中。同时，使用DLL的动态链接并不是将库代码拷贝，只是在程序中记录了函数
的入口点和接口。不管多少程序使用了DLL，内存中都只有该DLL的一个副本，当没有程序使用它时
系统将它移出内存，减少了对内存和磁盘的要求。
（2）编写DLL时需：必须列在DLL的exports字句中，在DLL外部就能看到该子例程
                                  exports entry1,...,entryn;  entry1,...,entryn包括函数名称，index标识符和对应
                                 的整数标识符，name标识符和对应的函数的别名字符串，，可省后面的
                                  DLL的参数类型应该是缺省的Windows类型。
                                  DLL可以使用全局数据，该数据将不会通过应用程序来共享
                                 输出函数应该被声明为stdcall，以便使用标准的Win32参数传递技术来代替优
                                化了的register参数传递技术（在Delphi 中是缺省的）。
（3）写好代码后，按Ctrl+F9 进行编译，通过后，运行Project-〉Build命令建立工程对应的DLL。
（4）调用DLL有两种方法，一种在程序设计期调用，一种是在程序运行期间动态装入。
         动态装入动态链接库，需要3个Windows API函数
　　　　　　　　　　　　LoadLibrary ：将DLL动态的装入内存
　　　　　　　　　　　  HINSTANCE LoadLibrary (LPCTSTR lpLibFileName);//指定模块所在的文件名
                                           GetProcAddress：获取DLL中指定模块的地址
　　　　　　　　　　　　FARPROC GetProcAddress(HMODULE hModule,LPCSTR lpProcName);
　　　　　　　　　　　　　　　　　　　　　　//DLL模块的句柄，//函数名称
                                         FreeLibrary：动态的卸载动态链接库  
                                          BOOL FreeLibrary(HMODULE hLibNodule);//DLL模块的句柄