http://forum.ubuntu.org.cn/viewtopic.php?t=55250&highlight=

首先安装对应CPU的ubuntu版本，我的是x86_64
插入盘启动，按F2选简体中文
建议安装时 /home /usr 单独分区
不会的就直接安装在一个区上 当然全盘也行
安装到83％ 安装语言时跳过，安装完毕，选重启
进入系统后到kernel.org 下载核心 我的2.6.21.1
点击系统－系统管理－语言支持 花较长时间
安装两个文件后在chinese 后打勾 安装中文 花很长时间
趁这段时间打开 应用程序－附件－终端
输入 sudo passwd root
回车后要求输入你的密码
输入后回车
系统要求输入新的root 的密码
要求再输入一次验证
exit 回车关闭终端
打开系统－系统管理－登录窗口
输入密码（不是root的，是你的帐号的）
点击倒数第二标签－安全
在 “允许本地系统管理员登录” 前打勾
关闭
语言安装完后重启
以root登录
复制 linux-2.6.21.1.tar.bz2 到 /usr/src 右键解压缩到此处
打开应用程序－附件－终端
$表示命令输入要回车，就是一条命令
$apt-get install build-essential bin86 kernel-package
$apt-get install libqt3-headers libqt3-mt-dev
$apt-get install initrd-tools
这三个是安装需要的软件包，注意要要求输入y/n 选y

$cd /usr/src
$ln -s linux-2.6.21.1 l inux (注意各处空格 ，空几格都可以 )
$cd /linux
$make xconfig
回车后一会儿会弹出窗口要求配置内核 不懂的地方就默认吧，内容太多我说不清
配置完后点击保存，退出
提示： x表示图形窗口 config意思是配置, x和config之间无空格
$make bzImage bz 后的是大写i ，时间有点长
$make modules 时间有点长
$make modules_install
$cp /usr/src/linux/arch/x86_64/boot/bzImage /boot/vmlinuz-2.6.21.1
$cd /boot
$mkinitrd -o initrd.img-2.6.21.1 2.6.21.1 -后是小写字母0，第二个2.6.21.1不是多余的
打开/boot/grub的menu.lst
在
title Ubuntu, kernel 2.6.20-15-generic
root (hd0,10)
kernel /vmlinuz-2.6.20-15-generic root=UUID=72a4be54-44aa-46ed-8dff-821347e4bac6 ro quiet splash locale=zh_CN
initrd /initrd.img-2.6.20-15-generic
quiet
savedefault
下面添加
title kernel-2.6.21.1
root (hd0,10)
kernel /vmlinuz-2.6.21.1
initrd /initrd.img-2.6.21.1
如果把
title kernel-2.6.21.1
root (hd0,10)
kernel /vmlinuz-2.6.21.1
initrd /initrd.img-2.6.21.1
和
title Ubuntu, kernel 2.6.20-15-generic
root (hd0,10)
kernel /vmlinuz-2.6.20-15-generic root=UUID=72a4be54-44aa-46ed-8dff-821347e4bac6 ro quiet splash locale=zh_CN
initrd /initrd.img-2.6.20-15-generic
换位
自己编译的kernel-2.6.21.1核心就成为默认启动 一般自己编译的要稳定些
至此内核编译完成
建议在编译内核时在下载语言包
节省大量时间！
$apt-get install initrd-tools
命令失败的话就到新立得下载！



安装qq mplayer xmms bt 等可以打开 系统－系统管理－新立得软件包管理器
搜索eva mplayer xmms azureus 安装
至于realplayer
下载http://www.real.com/linux/

把RealPlayer10GOLD.bin复制到文件夹如/home
右键 属性 权限 执行 后打勾
在终端
$cd /home
$./RealPlayer10GOLD.bin 是点后一／ 点不能少
后面自己搞定，注意有一个是选择安装路径
建议在/usr/local 建一个文件夹real来安装 root才能在那里建立文件夹！

关于显卡驱动

自己下载驱动 在ATI NVIDIA官方下载
我的是集成的6100 驱动是NVIDIA-Linux-x86_64-1.0-9755-pkg2.run
在google输入linux nvidia 就第一个
下载到/home 改名nv.run
安装时就不用打长串的名字了
必须不启动X服务在文本界面下安装
ubuntu7.04没有inittab 我也没有找到传说中的 upstart
我是启动原带的第二个内核 ，
安装驱动后;inux-2.6.21.1就不能启动X
再启动linux-2.6.21.1安装驱动就ok了
以毒攻毒啊！！！！！！！！！！！
注意安装的英文提示、选择，不要搞错了！！！
有问题请跟帖。
欢迎指正！

顺便说一下
安装驱动后 系统－首选项－桌面特效
可以开启简单的XGL

更新：关闭gdm（gnome的图形界面管理器）或是kdm（kde的图形界面管理器）就可以进入纯文本模式了

再次更新：遇到kernel panic －not syncing：Apptemped to kill init 死机的解决：
在grub界面按e编辑启动设置，在kernel那行后面加 noapic就ok了
进入系统记得改/boot/grub/menu.lst


更新：学校断电闪坏系统文件，只好重装。备份/var/cache/apt文件夹后就不用再下载软件包了！
重装后用备份的覆盖apt就OK了！

重要更新：

initrd-tools 已经不能满足新的内核编译要求，会出现编译错误！
apt-get install initrd-tools 这条可以去掉，换成 apt-get install yaird

mkinitrd -o initrd.img-2.6.xx.x 2.6.xx.x 换成 yaird -o initrd.img-2.6.xx.x 2.6.xx.x
运行此命令前 复制config文件
cp /usr/src/linux-2.6.xx.x/arch/x86_64/defconfig /boot/config-2.6.xx.x

有人安装后更新系统出现failed to write cache,解决办法http://hi.baidu.com/yommc/blog/item/7f160f661584f526aa184ce5.html
可以直接复制下面的代码到终端就行了


sudo touch /usr/share/fonts
sudo touch /usr/share/fonts/X11
sudo touch /usr/share/fonts/X11/100dpi
sudo touch /usr/share/fonts/X11/75dpi
sudo touch /usr/share/fonts/X11/Type1
sudo touch /usr/share/fonts/X11/encodings
sudo touch /usr/share/fonts/X11/encodings/large
sudo touch /usr/share/fonts/X11/misc
sudo touch /usr/share/fonts/X11/util
sudo touch /usr/share/fonts/truetype
sudo touch /usr/share/fonts/truetype/arphic
sudo touch /usr/share/fonts/truetype/baekmuk
sudo touch /usr/share/fonts/truetype/freefont
sudo touch /usr/share/fonts/truetype/kochi
sudo touch /usr/share/fonts/truetype/openoffice
sudo touch /usr/share/fonts/truetype/thai
sudo touch /usr/share/fonts/truetype/ttf-arabeyes
sudo touch /usr/share/fonts/truetype/ttf-bengali-fonts
sudo touch /usr/share/fonts/truetype/ttf-bitstream-vera
sudo touch /usr/share/fonts/truetype/ttf-dejavu
sudo touch /usr/share/fonts/truetype/ttf-devanagari-fonts
sudo touch /usr/share/fonts/truetype/ttf-gentium
sudo touch /usr/share/fonts/truetype/ttf-gujarati-fonts
sudo touch /usr/share/fonts/truetype/ttf-kannada-fonts
sudo touch /usr/share/fonts/truetype/ttf-lao
sudo touch /usr/share/fonts/truetype/ttf-malayalam-fonts
sudo touch /usr/share/fonts/truetype/ttf-mgopen
sudo touch /usr/share/fonts/truetype/ttf-oriya-fonts
sudo touch /usr/share/fonts/truetype/ttf-punjabi-fonts
sudo touch /usr/share/fonts/truetype/ttf-tamil-fonts
sudo touch /usr/share/fonts/truetype/ttf-telugu-fonts
sudo touch /usr/share/fonts/type1
sudo touch /usr/share/fonts/type1/gsfonts
sudo touch /usr/share/X11/fonts
sudo touch /usr/share/X11/fonts/100dpi
sudo touch /usr/share/X11/fonts/75dpi
sudo touch /usr/share/X11/fonts/Type1
sudo touch /usr/share/X11/fonts/encodings
sudo touch /usr/share/X11/fonts/encodings/large
sudo touch /usr/share/X11/fonts/misc
sudo touch /usr/share/X11/fonts/util
sudo touch /usr/local/share/fonts
sudo touch /var/lib/defoma/fontconfig.d
sudo touch /var/lib/defoma/fontconfig.d/A
sudo touch /var/lib/defoma/fontconfig.d/B
sudo touch /var/lib/defoma/fontconfig.d/C
sudo touch /var/lib/defoma/fontconfig.d/D
sudo touch /var/lib/defoma/fontconfig.d/E
sudo touch /var/lib/defoma/fontconfig.d/F
sudo touch /var/lib/defoma/fontconfig.d/G
sudo touch /var/lib/defoma/fontconfig.d/H
sudo touch /var/lib/defoma/fontconfig.d/J
sudo touch /var/lib/defoma/fontconfig.d/K
sudo touch /var/lib/defoma/fontconfig.d/L
sudo touch /var/lib/defoma/fontconfig.d/M
sudo touch /var/lib/defoma/fontconfig.d/N
sudo touch /var/lib/defoma/fontconfig.d/O
sudo touch /var/lib/defoma/fontconfig.d/P
sudo touch /var/lib/defoma/fontconfig.d/R
sudo touch /var/lib/defoma/fontconfig.d/S
sudo touch /var/lib/defoma/fontconfig.d/T
sudo touch /var/lib/defoma/fontconfig.d/U
sudo touch /var/lib/defoma/fontconfig.d/V
sudo touch /var/lib/defoma/fontconfig.d/a
sudo touch /var/lib/defoma/fontconfig.d/j
sudo touch /var/lib/defoma/fontconfig.d/m
sudo touch /var/lib/defoma/fontconfig.d/u


还有楼下用make-kpkg命令的办法不错，很方便, 就是显卡驱动安装不了


打开终端

sudo su -
mkdir src
cd src
tar jxvf 内核源码的路径以及文件名
cd linux<TAB补全>
make menuconfig && make -j3 && make modules_install && make install


编译后/boot下会增加三个文件
一个配置文件 config
一个内核镜像 vmlinuz.img
一个map文件 System.map
加起来一般是2M到3M
如果太大 很有可能是你配置内核的时候把用不着的东西也保留了


至于 grub.conf(menu.lst) 根本不用动它
不过我还是建议改成这样的形式
timeout 0

password --md5 $1$yr9zw1$dQcry7YM2ZWclbvWfTQyF/

title Linux AMD64
root (hd0,0)
kernel /vmlinuz noapic quiet root=/dev/sda6
#没错 这就是我的完整的grub配置文件

如果新内核和原来的内核版本相同
make install的时候会自动把 /boot 下的老内核在文件名后加.old
新内核则使用原来内核的文件名
不管怎样 只要vmlinuz和System.map这两个符号连接指向新内核就可以了 


编译内核还是用sudo fakeroot make-kpkg --revision=custom.1.0 kernel_image 编译成deb包来的方便
卸载也方便

////////////////////////////////////////////////////////////////////////////////////////////////////
Ubuntu重新编译linux内核 2007年5月4日 Ubuntu重新编译linux内核
//重新编译linux内核可以让你更加清楚地了解linux内核。以下的步骤是在根据网上的教程改的。在我的机子里试过，编译成功。但还是有很大风险的，不太了解linux的新手最好不要试。

需要先安装编译环境

进入 root 帐户：

＃sudo -s -H

安装必要的工具：

#apt-get install build-essential //安装 gcc, make 等
#apt-get install libncurses-dev  //安装 make menuconfig 时必须的库文件
#apt-get install kernel-package, fakeroot //Debian 系统里生成 kernel-image 的一些配置文件和工具
#apt-get install initramfs-tools, module-init-tools  //(顾名思义)

安装 kernel-source：

可以从 Ubuntu 的源安装，这样的好处是简单，而且安装的内核是
Debian 化了的，缺点是内核不是最新的内核。

#apt-get install linux-source

也可以从 www.kernel.org 下载内核安装。kernel.org 的境象应该
很多，选一个最快的来下载，因为要下载的文件很大。我这里介绍的
是安装 2.6.17 的内核，加上了 ck 的补丁。

下载 linux-2.6.17.tar.bz2 和 patch-2.6.17-ck1.bz2 ，并且把它
们都存放在 /usr/src 目录下。

#tar xvjf linux-2.6.17.tar.bz2
#ln -s linux-2.6.17 linux  //(如果已经有了 linux 目录，则要先将其删除)
#cd linux
#bzcat ../patch-2.6.17-ck1.bz2 | patch -p1

至此，内核源文件以及补丁就都安装好了。
把源码包解压到 /usr/src/linux-2.6.17.6，然后在/usr/src/下创建一个名为linux的指向/usr/src/linux-2.6.17.6的链接(link)。

在shell中输入
root@localhost:~# cd ..
root@localhost:/# cd /usr/src/linux
root@localhost:/usr/src/linux# make mrproper
root@localhost:/usr/src/linux# make xconfig
或者make gconfig
此时qconf已经读取了默认配置，你也可以这样做：
在qconf中点File->Load 去读取其他的设置文件。
比如 /boot/config-2.6.15-23-686

下面在qconf中配置.config文件。选“Y”（打勾）就是把它编译到内核中，选“M”（打点）把它编译成模块，供内核动态调用。选“N”就是不安装。
关于每一选项的说明，qconf里都有，这里不再赘述。如果你没有把握，保持默认选项就行了。
下面只是简单提几项：
General setup
    Optimize for size (Look out for broken compilers!)    发烧友可以选Y以获得更小的内核。
    Processor type and features
    Symmetric multi-processing support    如果你没有多线程处理器这个可以选N
    Processor family    根据你的CPU来选择。
    High Memory Support  1G以上内存的选“4GB”, 1G以下的，将来也不打算升级到1G的，选“off”.
   
Bus options (PCI, PCMCIA, EISA, MCA, ISA)
    PCI support
        PCI Express support  老式机器没有PCI-E设备的可以选N
    ISA support 较新的新机器没有ISA设备，可以选N
    MCA support    一般选N
    NatSemi SCx200 support  一般选N
    PCI Hotplug Support
        Support for PCI Hotplug (EXPERIMENTAL)     如果没有PCI热插拔设备，选N
   
Device Drivers   
    Block devices
        Packet writing on CD/DVD media
            Enable write caching (EXPERIMENTAL)  如果你有刻录机，想启用写缓存功能，选Y
   
    ATA/ATAPI/MFM/RLL support
        Include IDE/ATA-2 DISK support  如果你的/boot是放在IDE硬盘上，那么这里一定要选Y，选M都不行。否则启动时会出现“waiting for root file system”的提示而停滞不前。
    SCSI device support  如果有SATA硬盘，就选Y
        SCSI disk support  如果你的/boot放在SATA硬盘上，一定要选Y。   
    Character devices
        I2C support 一般可以选Y或者M   
    Graphics support    不建议把显卡驱动编译进内核。,选M,编译成模块方便日后升级驱动。
        Support for frame buffer devices
            VESA VGA graphics support    可以选Y
        Logo configuration
            Bootup logo    如果想看到Linux启动logo，选Y
    Sound 
        Sound card support  选Y， 除非你没有声卡

其他的驱动，酌情添加删除，根据机器配置删除不需要的驱动可以缩短编译时间。你可以在命令行下输如lspci或者dmesg查看硬件信息。

File systems
    CD-ROM/DVD Filesystems
        ISO 9660 CDROM file system support 一般选Y
    DOS/FAT/NT Filesystems
        VFAT (Windows-95) fs support    有FAT32分区就选Y吧
        NTFS file system support    有NTFS分区就选Y吧
            NTFS write support    如果想对 NTFS分区进行写操作，选Y
    Native Language Support
        Simplified Chinese charset (CP936, GB2312)        选Y或者M使读取FAT分区不会遇到中文乱码现象
       
设置完毕后，按一下保存按钮,无论原先载入的是哪个配置文件，
qconfig都将设置保存到 /usr/src/linux/.config 这个隐含文件。

下面输入make开始编译，这一过程大约需要60－90分钟
root@localhost:/usr/src/linux# make

安装内核
root@localhost:/usr/src/linux# make install
编译模块
root@localhost:/usr/src/linux# make modules
安装模块
root@localhost:/usr/src/linux# make modules_install
然后
root@localhost:/usr/src/linux# cd /
root@localhost:/usr/src/linux# /usr/sbin/mkinitramfs -o /boot/initrd.img-2.6.17.6 2.6.17.6
如果有出错提示，可能是因为 initramfs－tools 没有装，先把它装上吧。
如果没有这一步骤，那么开机就会出现提示
……
initrd /initrd.img-2.6.17.6
Error 15: File not found
最后打开 /boot/grub/menu.lst
在 ## ## End Default Options ## 下面添加类似下面的两段
title        Ubuntu, kernel 2.6.17.6
root        (hd0,4)
kernel        /vmlinuz-2.6.17.6 root=/dev/hdd6
initrd        /initrd.img-2.6.17.6
savedefault
boot

title        Ubuntu, kernel 2.6.17.6 (recovery mode)
root        (hd0,4)
kernel        /vmlinuz-2.6.17.6 root=/dev/hdd6 ro single
initrd        /initrd.img-2.6.17.6
boot

注意 root和kernel字段要模仿menu.lst下面已有的内容写。
下面是 (hd0,4)，那么你也写(hd0,4)，下面写root=/dev/hdd6，你也写root=/dev/hdd6，只是内核的版本号改为现在编译的版本号。
然后把下面重复的savedefault删除。

重新启动计算机，在GRUB中选择新内核启动。如果启动失败，你可以重启选择老内核。

如果你的
NTFS file system support
NTFS write support
这两项都选了Y，但是开机认不出NTFS分区，那么可以尝试以下解决方案：

到 http://packages.ubuntu.com/dapper/admin/sysv-rc-conf 下载 sysv-rc-conf
双击下好的deb包安装，如果缺少其他的包，补装上。

以root权限在shell中输入
root@localhost:~# sysv-rc-conf

找到evms, 按空格把那一行的X全部清空。
输入q退出保存。 

//////////////////////////////////////////////////////////////////////////////////////////////////////
在Ubuntu 7.10下编译使用新内核的方法
　首先使用下面的方法编译内核：　　编译内核和驱动：
　　安装声卡和显卡驱动：（可选）
    > apt-get install alsa-source
　　（可能会建议安装 kernel-source-2.4.**， 选择不安装这个
　　kernel-2.4.**）
　　该命令会在目录下生成一个 alsa-driver.tar.bz2 文件。
    > cd /usr/src
    > tar xvjf alsa-driver.tar.bz2
　　该命令会在 /usr/src/modules 目录下生成 alsa-driver 目录
    > dpkg-reconfigure
　　（选择你机器上有的声卡）
　　因为我的显卡是 nvidia 所以我就只介绍如何安装 nvidia 的驱动

    > apt-get install nvidia-new-kernel-source
    > cd /usr/src
    > tar xvzf nvidia-new-kernel-source.tar.gz
　　在 /usr/src/modules 目录下生成了 nvidia-new-kernel 目录

    > cd /usr/src/linux
    > make-kpkg clean
    > fakeroot make-kpkg --initrd --append-to-version=-core2-smp
　　——rev=1.0 kernel_image modules_image
　　说明：initrd 选项是为了生成 initrd.img 用的。 另外的 -core2-smp 和
　　1.0 可以是任何别的一些字符串。
　　如果一切顺利，该命令结束以后会在 /usr/src 目录下生成三个 deb 文件，
　　分别是 kernel-image-2.6.17-ck1_1.0_i386.deb， nvidia-kernel-****.deb
　　和 alsa-****.deb
　　安装：
    > cd /usr/src
    > dpkg -i kernel-***.deb nvidia-***.deb alsa-***.deb
　　系统会自动安装内核，生成 initrd 境象，配置 grub 菜单。
　　最后的说明：
　　a. 如果因为某些原因使得新装的内核不能正常工作而需要对内核作一些小
　　修改，则只需要进入 /usr/src/linux 后 make menuconfig，然后不用
　　make-kpkg clean 而直接
　　fakeroot make-kpkg ——initrd ——append-to-version=*** ——rev=**
　　！这里 rev 和 append-to-version 的参数要和原来的一样。
　　这样可以节省很多重新编译的时间。
　　b. 新的内核的第一次运行时，图形界面有可能不能正常工作，只需进入
　　root 帐户，执行 depmod ，然后再 /etc/init.d/gdm restart .
　　执行完上面的步骤后，在我的系统里面还是不能进入图形界面， 发现是模块没正确加载。
　　insmod /lib/modules/2.6.23.1-core2/nvidia/nvidia.ko
　　然后在运行/etc/init.d/gdm restart就进入图形界面并可以开3D桌面。
