  166  mplayer mms://live.giga.net.tw/FM917
  167  mplayer http://live.giga.net.tw/hitfmkp
  168  mplayer http://live.giga.net.tw/hitfmtc

最近经常上你的网站，所以经常听到你的背景音乐。第一首我听过，是叫moonlight shadow吧，但第二首从没听过，很好听，能不能发到我邮箱里，谢谢^o^

下面是moonlight shadow的歌词
The last that ever she saw him, carried away by a moonlight shadow,
He passed on worried and warning, carried away by a moonlight shadow,
Lost in a riddle that Saturday night, far away on the other side,
he was caught in the middle of a desperate fight, and she couldn't find how to push through.

The trees that whisper in the evening, carried away by a moonlight shadow,
Sing the song of sorrow and grieving, carried away by a moonlight shadow,
All she saw was a silhouette of a gun, far away on the other side,
He was shot six times by a man on the run, and she couldn't find how to push through.

I stay, I pray, I see you in heaven far away,
I stay, I pray, I see you in heaven one day.

Four a.m. in the morning, carried away by a moonlight shadow,
I watched your vision forming, carried away by a moonlight shadow,
Star was glowin' in a silvery night, far away on the other side,
Will you come to talk to me this night, but she couldn't find how to push through.

I stay, I pray, I see you in heaven far away,
I stay, I pray, I see you in heaven one day. 



bootstrapping
启动，打开电源，CPU接管控制权，开始执行BIOS（以及其他硬件部件）中的命令（自检），然后BIOS将控制权转交给引导程序，引导程序再将控制权交给Linux内核。接着内核开始运行后，以下几步必须经历：
1、CPU进行自身初始化并向计算机其他部分发送控制信号。
2、BIOS执行开机自检（power－on self test， POST）P305。。。

BIOS从MBR或者其他引导设备载入程序，在活动分区的引导扇区中存储的引导程序提示用户选择操作系统，linux的话，引导程序会载入Linux内核并启动。

启动内核
引导程序发现一个可启动的Linux内核，她会将内核的第一部分载入内存，然后将控制权交给这部分程序，这部分内核将内核的其他部分载入内存并进行解压缩，完毕后，初始化系统内存，检查硬件各部件以便它可以同这些部件进行通信，最后，内核确定硬盘空间的分布并挂载文件系统，这些操作会向屏幕输出相应信息，结束后，用户登录。dmesg命令显示内核环缓冲区（kernel ring buffer——是存储内核信息的一片内存区域）的内容，/var/log/dmesg

使用引导参数
引导程序启动linux内核，可向内核传递一些信息——引导参数：指导Linux如何操作或访问计算机系统的硬件。grub，按a。

free可显示出内核可识别的内存容量
single
mem参数，表明Linux十集的内存数
man bootparam

GRUB
/boot/grub/menu.lst

init程序及其脚本
init程序是一个主控程序，可以启动许多其他的程序。
由配置文件/etc/inittab控制，这个文件中包含了指向init要运行的脚本的指针，每次init启动时，都会运行这些脚本来初始化Linux系统。
7.04没有/etc/inittab的话，那么是/etc/event.d中有很多相关配置
/etc/rc.d<----/etc/init.d里面的rc和rc.local
Run Level
0——停机，关闭所有服务
1——单用户模式，用于系统维护，不需要以用户名和口令登录，但具有root权限，不提供网络功能
2——无网络功能的多用户模式，系统维护或测试时
3——普通的多用户网络模式，标准的文本界面模式
4——没有用到，保留
5——图形界面登录，使用了图形登录界面，其他设置同3    exec startx
6——重启，停止所有的服务，重启系统

init和telinit可通知init程序转换到另一个run level

内核--->启动init程序（使用inittab配置文件）--->1，运行rc.sysinit /2，运行rc /3，rc.local --->运行rcX.d中的脚本，指向init.d中的脚本<---使用来自/etc/sysconfig（没有）的数据

温和地关闭Linux系统
reboot：使系统转到run level6上运行从而关掉所有的服务，最后重启计算机
halt：使系统转到run level0上运行从而关掉所有的服务，显示System halted
shutdown：shutdown -r 3 or shutdown -h 4
Ctrl+Alt+Del:执行shutdown并立即重启系统
telinit 0:挂起系统或者telinit 6：重启系统

mount若不加参数的话，显示当前已经被挂载的所有文件系统
df显示当前挂载的没一个文件系统的空间使用情况，只显示常规文件系统的信息，而不显示特殊文件系统（swap和proc）
df -B M

du（disk usage）可以帮助您检查文件系统状态
du -B M
du | grep ^.....[0-9]

lsattr:列出某个目录下的文件属性，默认是没有属性集的
chattr:修改一个或多个文件的属性，如A，a，c，D，d，E，I，i，j，s，S，T，t，u，X，Z

fsck用于检查文件系统的完整性，确定每一个inode都被正确地链接到一个文件，存储每一个文件的磁盘块都能够被找到等等。
fdisk管理Linux分区，修改硬盘分区，只有退出fdisk才会被写入分区表；退出fdisk使用w命令进行存盘，对分区表所做的修改才能生效。
sudo fdisk /dev/sda7

格式化文件系统mk****
软盘fdformat /dev/fd0

挂载新的文件系统 mount -t ext3 /dev/sda5 /someplace
使用网络文件系统 mount -t nfs gxnjs.yzu.edu.cn:/doc /someplace
自动挂载文件系统的关键在于/etc/fstab配置文件
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc            /proc           proc    defaults        0       0
# /dev/sda3
UUID=49e4f67e-2ace-4d7c-8831-8f8d8c21aab1 /               ext3    defaults,errors=remount-ro 0       1
# /dev/sda2
UUID=B8B4-FAFE  /media/sda2     vfat    defaults,utf8,umask=007,gid=46 0       1
# /dev/sda5
UUID=12F188F6C8316D19 /media/sda5     ntfs    defaults,nls=utf8,umask=007,gid=46 0       1
# /dev/sda6
UUID=206F-067B  /media/sda7     vfat    defaults,utf8,umask=007,gid=46 0       1
# /dev/sda7
UUID=6e014997-3ae5-459d-aa79-4c5e3c8249de none            swap    sw              0       0
/dev/cdrom       /media/cdrom0   udf,iso9660 user,noauto     0       0
/dev/fd0        /media/floppy0  auto    rw,user,noauto  0       0

文件系统所在的设备或是使用该文件系统所对应的硬盘卷标，通过卷标可以快速访问分区
挂载点，即设备被挂载后访问该设备所使用的路径，除swap分区
文件系统类型 proc和swap特殊
文件系统被挂载时所采用的选项   mount的选项
文件系统是否能够响应dump命令 用1表示可以使用dump命令来打印文件系统的结构信息，只有ext2或ext3被设为1
引导Linux系统时检查文件系统的顺序，根文件系统设为1；其他的ext2或ext3设为2；如果设为0，则表示不对文件系统进行检查。所有不被自动挂载的文件系统在该字段的值为0
mount -t ext3 -o defaults /dev/sdb2 /mount/someplace

若希望文件系统不需要保持在挂载状态也能够被访问；而与此同时，又不希望在每次需要访问该文件系统时都能够（或者必须）挂载它。——autofs：监视用户工作路径的改变，看用户是否切换到被配置为autofs挂载点的目录。当用户进入autofs挂载点目录时，autofs守护进程在后台挂载用户所需的文件系统，以便能够从该文件系统中访问数据。

交换空间
可以有多个swap分区，首先得fdisk建立一个分区，后mkswap格式化该分区，后在/etc/fstab添加一行内容，如上类似
命令swapon激活交换空间

设定磁盘使用配额
管理文件系统的另外一种方式是对每个用户或每个组限定可以使用的硬盘空间总量，这种限制称为磁盘配额（disk quota）
设定配额步骤：
1、打开文件系统的配额功能，在挂载文件系统时添加usrquota或者grpquota选项（在etc/fstab文件中包含usrquota或者grpquota）
2、使用edquota命令为一个（或更多）用户（或组）设定配额
3、使用quotaon激活配额系统
4、使用repquota检查文件系统的当前磁盘使用量，或者使用quota命令检查特定用户或组的当前磁盘使用量。
ulimit

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
管理用户
创建新用户帐户
1、将需要放入每个用户的home目录中的默认文件添加到/etc/skel目录中（在创建每一个新用户时，包含于/etc/skel中的文件会自动复制到该用户的home目录，所以应该在安装Linux时就将一些基本的文件放入/etc/skel，以便这些文件被自动放入使用useradd命令创建的每一个用户的home目录中，/etc/skel中的许多文件是隐藏的配置文件。）
2、为所有用户创建home目录，通常情况下，这个目录是/home；还可以为不同分组的用户帐户创建子目录
3、配置用于所有用户的默认设置文件，该文件位于/etc/login.defs或/etc/default/useradd
4、创建组：向创建的用户帐户分配成员关系
5、为每个用户创建用户帐户
6、为每个用户创建一个有效的口令，并将口令分配给该用户

/etc/passwd的直接编辑vipw
向/etc/passwd中添加一行之后，需要使用passwd命令来定义一个口令，然后创建home目录，添加希望分配给这个用户的任何默认文件。这个新用户就可以登录并开始使用系统了。
图形工具和命令行
Local password is locked的好处：用户不能对口令进行修改。当某个用户的口令在多个系统之间同步，或者他的用户信息是大型共享网络数据库的一部分时，锁定本地口令是有用处的。通过防止用户对该帐户对应的口令进行修改，可以维持该用户使用同一口令跨多个系统工作的能力。

删除帐户 or 禁用用户帐户？
临时或永久性禁用
临时的话：passwd -l锁定该帐户，或者可以编辑/etc/shadow，在加密的口令前放置一个星号，或者直接在/etc/passwd中用于定义该用户帐户的行首加个#，注释掉即可。
永久删除用户
userdel lizo  删除/etc/passwd中用户，但不删除该用户的home目录或它的内容
groupdel  删除/etc/group文件中删掉，但是属于改组的任何用户帐户仍然拥有这个组的GID，所以应该要修改掉这些GID。另外，将该GID作为所有者的任何文件依旧具有这个GID，但这个GID无效，应当使用chown和find命令来定位这样的文件，然后将其组所有者改为有效的组。


useradd/adduser是useradd的一个符号链接

useradd -D 显示useradd命令的默认设置
GROUP=100
HOME=/home
INACTIVE=-1    #在用户口令到期之后，到该帐户被禁用之前，期间的天书，-1表示禁用这个选项（没有到期时间）
EXPIRE=        #新帐户的到期时间
SHELL=/bin/sh
SKEL=/etc/skel #skeleton目录的路径，用于将基本的一些文件填充新的home目录
CREATE_MAIL_SPOOL=no
编辑/etc/default/useradd可以修改useradd的默认设置，也可以通过useradd -D选项修改
新帐户的口令需重新设，不适合使用useradd的-p选项，而是用passwd somebody
passwd -l somebody  #锁定用户帐户来临时禁用帐户
passwd -u somebody  #解除锁定用户帐户

创建新组
直接修改/etc/group
也可用groupadd

usermod用于修改现有帐户，groupmod修改组的信息
usermod -c 'Lizzie' liz  #改注释字段
usermod -l 'some login name' -d /home/liz liz  #改登录名和home目录

groupmod修改组的信息
groupmod -g 600 -n teamlead managers

grpck命令来检查/etc/group和/etc/gshadow文件的完整性
newgrp或sg命令后跟一个口令来切换当前组，前提是已经使用gpasswd命令来对该组分配了该口令。

设置口令选项
chage来修改口令的时效信息，如口令到期时间等等
chage -l somebody  #列出当前设置

较老的系统中，若不使用shadow口令系统，那么所有用户的加密口令都存储在/etc/passwd中。可以使用pwconv工具来将较老的/etc/passwd口令存储格式转换为/etc/shadow口令存储格式，相反，可以使用pwunconv工具来将/etc/shadow口令存储格式转换为较老的/etc/passwd口令存储格式；同样对于组的口令有grpconv和grpunconv；
完成后，可使用pwck检查/etc/passwd和/etc/shadow的有效性。

权限问题

Linux支持几种专用文件权限，这些权限提供一些不同寻常的功能，
Set User ID和Set Group ID

粘滞位（sticky bit）：以前较老的UNIX系统上是用来控制交换空间对程序文件的操作方式——也就是说，是否总是将文件保存在交换空间中以便内核可以快速访问它，而现在，粘滞位不再用于程序文件——Linux内核忽略粘滞位，但粘滞位能够为目录提供专门用途。当在目录上设置粘滞位时，只有拥有该目录的用户或root才能对该目录中的文件重命名或解除链接。如果不设置这个权限，那么对该目录具有写权限的任何用户都可以删除或重命名这个目录中的文件。粘滞位通常用于希望所有用户都能够在其中创建文件的目录上，比如/tmp目录。
设置粘滞位可以使用chmod
chmod a+t  /tmp

Set User ID权限（SUID位）可以添加给设置了执行权限的文件。当添加了SUID时，这个权限使得执行该文件的用户可以获取该文件所有者的文件权限。
如/bin/bash，在执行时提供一个shell提示符。某人以liz用户登录，执行/bin/bash，那么这个人在使用bash时具有用户liz的权限，但是如果/bin/bash（为root用户所拥有）上设置了SUID权限，则无论什么时候liz或其他用户执行bash，该用户都具有该文件所有者（这边是root）的权限。
少数专用程序而言，这个特性很有用，如chage必须访问/etc/shadow文件，而只有root才可以读该文件，因为允许任何用户都可以看到他的口令什么时候到期，所以，当普通用户（非root）执行chage命令时，该命令必须能够“充当root用户”并能够读/etc/shadow文件。
ls -l /usr/bin/chage
-rwxr-sr-x 1 root shadow 38128 2006-12-20 04:35 /usr/bin/chage
一般Linux系统上，只有约10个命令设置SUID权限。SUID可能非常危险，因为在脚本文件上使用SUID，Linux内核会忽略该文件上的SUID权限。
chomd u+s file  #将s添加到用户权限（文件所有者权限）。文件必须在设置SUID权限的同时设置执行权限。

Set Group ID权限
导致执行某个程序文件的人在执行该程序时具有文件所属组的权限。
chmod g+s file
若按数字方式，四位数，第四位用来进行设定。4表示SUID，2表示SGID，1表示粘滞位
如：chmod 4500 file
chmod u=rxs

在目录上添加SGID权限，在这个目录里创建的任何文件都被分配给这个目录的组，而不是创建该文件的用户。对于即允许创建文件又允许读彼此的文件的某一组用户，这是为这些用户创建工作空间的便利方法，所有这些用户在没有系统管理员介入的情况下都能访问每个单独的文件。





／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／


用户安全性问题

命令行或文本模式下，文件/etc/motd的内容是在shell启动之前显示（即当日消息），通知登录系统的所有用户
wall：向登录到系统上的所有用户发送一条即时消息，这个命令在命令行上向正在使用文本模式或打开了终端窗口的所有用户发送一条广播消息
fuser：可以了解用户正在做什么。如在卸载文件系统时判断
fuser   /home      username //文件系统情况  
fuser  /dev/ttyS1   //了解串口
fuser  telnet/tcp   //网络连接的情况
fuser -km /home     //让fuser杀死正在使用指定的，已挂载的文件系统的所有进程；-m：表已挂载的文件系统，-k：杀死进程


root有限的访问权限
shengyan@LIZZIE:~$ sudo cat /etc/sudoers   //该配置文件来确定哪些用户可以执行哪些任务
# /etc/sudoers
#
# This file MUST be edited with the 'visudo' command as root.
#
# See the man page for details on how to write a sudoers file.
# Host alias specification

# User alias specification

# Cmnd alias specification

# Defaults

Defaults        !lecture,tty_tickets,!fqdn

# User privilege specification
root    ALL=(ALL) ALL

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL
配置语法见man页
用户集合，主机集合，程序集合，sudo选项
例子：%user ALL=/sbin/mount /cdrom,/sbin/umount /cdrom    //%user指代系统上的名为users的组  ALL匹配所有主机
sarah myhost = (www) /usr/local/webcommands              //充当用户www的角色
使用visudo编辑/etc/sudoers，可避免在多个打开的文件之间出现冲突


可插入的身份验证模块(Pluggable Authentication Module, PAM)体系提供改良的用户级安全性，在管理用户身份验证方面的灵活性以及Linux配置数据与存储在其他系统上的用户信息之间的平滑集成。PAM是一个体系和一组库，让程序员创建一个模块来执行一种特定的安全相关功能，等等，使用其中的一个或多个模块来控制可以识别PAM功能的任何Linux程序的运行。
PAM通过使用配置文件/etc/pam.conf或者/etc/pam.d目录中的一系列配置文件来配置的（选择哪种配置类型）。目录方法的话，在/etc/pam.d目录中包含与需要进行配置的程序同名的配置文件，如/etc/pam.d/login配置login程序。每一个文件都包含一列（或多个）模块。还有other是为某个程序试图使用PAM但在/etc/pam.d中不存在对应的特定配置文件。

shengyan@LIZZIE:~$ cat /etc/pam.conf
# ---------------------------------------------------------------------------#
# /etc/pam.conf                                                              #
# ---------------------------------------------------------------------------#
#
# NOTE
# ----
#
# NOTE: Most program use a file under the /etc/pam.d/ directory to setup their
# PAM service modules. This file is used only if that directory does not exist.
# ---------------------------------------------------------------------------#

# Format:
# serv. module     ctrl       module [path]     ...[args..]                  #
# name  type       flag                                                      #

shengyan@LIZZIE:~$ ls /etc/pam.d
atd   common-account   common-session  gdm                login   ppp    su
chfn  common-auth      cron            gdm-autologin      other   samba  sudo
chsh  common-password  cupsys          gnome-screensaver  passwd  ssh


shengyan@LIZZIE:~$ cat /etc/pam.d/login
#
# The PAM configuration file for the Shadow `login' service
#

# Outputs an issue file prior to each login prompt (Replaces the
# ISSUE_FILE option from login.defs). Uncomment for use
# auth       required   pam_issue.so issue=/etc/issue

# Disallows root logins except on tty's listed in /etc/securetty
# (Replaces the `CONSOLE' setting from login.defs)
auth       requisite  pam_securetty.so

# Disallows other than root logins when /etc/nologin exists
# (Replaces the `NOLOGINS_FILE' option from login.defs)
auth       requisite  pam_nologin.so

# This module parses environment configuration file(s)
# and also allows you to use an extended config
# file /etc/security/pam_env.conf.
# 
# parsing /etc/environment needs "readenv=1"
session       required   pam_env.so readenv=1
# locale variables are also kept into /etc/default/locale in etch
# reading this file *in addition to /etc/environment* does not hurt
session       required   pam_env.so readenv=1 envfile=/etc/default/locale

# Standard Un*x authentication.
@include common-auth

# This allows certain extra groups to be granted to a user
# based on things like time of day, tty, service, and user.
# Please edit /etc/security/group.conf to fit your needs
# (Replaces the `CONSOLE_GROUPS' option in login.defs)
auth       optional   pam_group.so

# Uncomment and edit /etc/security/time.conf if you need to set
# time restrainst on logins.
# (Replaces the `PORTTIME_CHECKS_ENAB' option from login.defs
# as well as /etc/porttime)
# account    requisite  pam_time.so

# Uncomment and edit /etc/security/access.conf if you need to
# set access limits.
# (Replaces /etc/login.access file)
# account  required       pam_access.so

# Sets up user limits according to /etc/security/limits.conf
# (Replaces the use of /etc/limits in old login)
session    required   pam_limits.so

# Prints the last login info upon succesful login
# (Replaces the `LASTLOG_ENAB' option from login.defs)
session    optional   pam_lastlog.so

# Prints the motd upon succesful login
# (Replaces the `MOTD_FILE' option in login.defs)
session    optional   pam_motd.so

# Prints the status of the user's mailbox upon succesful login
# (Replaces the `MAIL_CHECK_ENAB' option from login.defs). 
#
# This also defines the MAIL environment variable
# However, userdel also needs MAIL_DIR and MAIL_FILE variables
# in /etc/login.defs to make sure that removing a user 
# also removes the user's mail spool file.
# See comments in /etc/login.defs
session    optional   pam_mail.so standard

# SELinux needs to intervene at login time to ensure that the process
# starts in the proper default security context.
# Uncomment the following line to enable SELinux
# session required pam_selinux.so multiple

# Standard Un*x account and session
@include common-account
@include common-session
@include common-password

每一行的语法：module_type control_flag module_path argumentscode
module_type类型包括：
auth：用于确定用户的身份验证模块，通过提示用户输入口令来进行身份验证
account：一旦身份已经通过auth模块进行了去定，就使用这些模块来管理该用户的帐户，一般情况下，这些模块是用来限制访问的，只允许用户在特定时间进行访问。
session：这些模块管理用户的当前会话。一般，这些模块注意那些在允许某个用户工作必须完成的任务
passwd：这些模块在用户需要修改口令（或其他身份验证令牌）时执行
一般各个模块是按栈顺序依次执行，返回Access Permitted或Access Denied。control_flag确定PAM如何处理栈式模块
control_flag支持四种值：
required：如果最终结果为Access Permitted，那么这个模块必须执行成功，就是必要模块，否则就是Access Denied
requisite：如果最终结果为Access Permitted，那么这个模块必须执行成功。如果一个充分必要模块失败，则不执行栈中剩余的模块，如果一个充分必要模块成功，则剩余的模块仍旧需要执行。
sufficient：即使这个模块失败，最终的结果还有可能是Access Permitted，但是如果这个模块成功，则对于Access Permitted结果是充分的，如果一个充分模块成功，则不执行其他模块，如果栈中前面的必要模块没有失败，则后面的模块的执行与该充分模块的执行结果无关。
optional：可选模块的结构不会影响一个模块栈的最终结果。
control_flag还支持：test=action//很杂
module_path是要执行模块的完整路径和模块名
argumentscode是在这个模块执行时应当传递给该模块的信息。

/etc/pam.d/system-auth包含这些模块配置行，工具authconfig


网络信息服务（Network Information Service, NIS）
该程序能让系统管理员为多个Linux服务器管理唯一的一组配置文件。
通过NIS，可以用一个文件来包含多个服务器上的多个用户，该文件位于这些NIS服务器之一，当某个用户登录到其他几个服务器中的任何服务器时，这个服务器通过与NIS服务器联系来了解该用户是否拥有一个有效的用户帐户。
有时称为黄页用户（yellow page），简写yp。一般在/etc/rc.d/init.d，还包括支持NIS的客户和服务器程序，ypserv，ypbind，yppasswdd和ypxfrd
NIS+或NISplus（更新版本），运行authconfig设置系统来使用NIS服务器。
重要的配置文件/etc/nsswitch.conf文件，该文件指导Linux中的各种系统程序来查找他们所需的配置信息，行格式为passed：files，引用本地系统上的/etc/passwd文件。可以在passwd行上列出其他选项，包括：yp或nis（用于NIS服务器），nis或nisplus（用于NIS+服务器），db（用于数据库文件）或者dns（用于DNS服务器）。如passwd: nis+, nis, files表示程序应该通过于某个NIS+系统联系来尝试找出某个用户的口令信息，如果找不到口令信息，则尝试使用某个NIS系统，如果还是没有找到口令信息，则检查本地文件/etc/passwd。
通过这种方式，可以集中管理大量用户帐户，同时为特殊场合提供灵活性。



／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／配置网络
一般，Linux中的设备是通过文件系统的/dev子目录来访问，很多设备，不一定实际存在于系统中，因为有些设备名出现在/dev中是为需要的时候安装相应的设备提供便利。但是Linux网络设备没有在该目录中并且只有在Linux内核中安装了正确的设备驱动程序后才回“存在”于系统中。传输网络流量的命名通道会更好一些。
网络功能是在Linux内核中处理的，所以所有的网络设备驱动程序实际上都实现为内核模块的形式。内核模块（kernel module）是内核的组成部分，可以在Linux运行时动态地加载和卸载，不过一般都将系统配置为在启动时直接自动地加载网络模块。加载了合适的内核模块之后，会自动定位以太网卡等网络设备并激活该设备以供内核使用，之后网络“设备”在系统上就变为可用状态。/dev/eth0。不需要直接干预，系统在安装时就会检测网卡设备并配置正确的内核模块。
介质访问控制（Media Access Control, MAC）地址，硬件地址。以太网上某台主机需要与其他主机通信时，必须首先获取目的主机以太网卡的MAC地址，要获取MAC地址，需要使用地址解析协议（Address Resolution Protocol, ARP)向整个网段进行消息广播，目的主机收到请求后将起MAC地址直接回应给源主机，源主机就将MAC地址和IP地址之间的对应关系进行存储或缓存。
arp：现是ARP缓存，即IP地址和硬件地址的映射关系。ARP缓存动态变化。。。

配置网络
ifconfig和route 脚本/etc/rc.d/init.d/network（没有，本机是/etc/networks脚本）
ifconfig参数最少包括三个：网络接口（如eth0）、分配给接口的IP地址、网络掩码——它们保证了数据包可以正确发送，其他参数如广播地址（broadcast address一个可以将数据包发送到同一网段上所有计算机的地址）、最大传输单元（Maximum Transmission Unit网络接口可以支持的最大数据包尺寸）、点对点连接、IPv6地址等
shengyan@LIZZIE:~$ ifconfig eth0
eth0      链路封装:以太网  硬件地址 00:10:5C:EA:9F:6C  
          inet 地址:192.168.0.56  广播:192.168.0.255  掩码:255.255.255.0
          inet6 地址: fe80::210:5cff:feea:9f6c/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1
          接收数据包:17343 错误:0 丢弃:0 过载:0 帧数:0
          发送数据包:7129 错误:0 丢弃:0 过载:0 载波:0
          碰撞:0 发送队列长度:1000 
          接收字节:3706119 (3.5 MiB)  发送字节:1691571 (1.6 MiB)
shengyan@LIZZIE:~$ ifconfig lo
lo        链路封装:本地环回  
          inet 地址:127.0.0.1  掩码:255.0.0.0
          inet6 地址: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  跃点数:1
          接收数据包:17 错误:0 丢弃:0 过载:0 帧数:0
          发送数据包:17 错误:0 丢弃:0 过载:0 载波:0
          碰撞:0 发送队列长度:0 
          接收字节:1622 (1.5 KiB)  发送字节:1622 (1.5 KiB)
ifconfig eth0 down  //禁用
ifconfig eth0 up  //启用
ifconfig基本语法：ifconfig device ip_address netmask address broadcat address
如ifconfig eth0 192.168.0.56 netmask 255.255.255.0 broadcast 192.168.0.255

route命令：查看或配置Linux内核中的路由表（routing table可以告诉网络软件将数据包发送到本地网络之外的哪个地址）。与ifconfig类似，route命令也在系统启动是进行网络初始化的过程中由Linux系统执行。
shengyan@LIZZIE:~$ route  //显示内核路由表
内核 IP 路由表                                     //Kernel IP routing table
目标            网关            子网掩码        标志  跃点   引用  使用 接口
192.168.0.0     *               255.255.255.0   U     0      0        0 eth0 //确定发向192.168.0.0（与eth0设备的IP地址关联的网络）网络的流量将发往何处
link-local      *               255.255.0.0     U     1000   0        0 eth0//确定发向本地（回环网络地址）网络的流量将发往何处
default         192.168.0.1     0.0.0.0         UG    0      0        0 eth0//确定了目的地址为上两行定义之外的任意数据包将发往何处。这些数据包必须发送到网关。
route每一列的含义：
Destination：路由表条目所应用的网络。
Gateway：用于接收去往某指定网络的数据包的计算机，*表明网络就是包含主机的那个网络本身（无需路由信息），或者为默认网关。
Genmask：规定用于识别任何IP地址（该地址包含在该行指定的目标网络中）的网络ID的网络掩码。
Flags：9个单字母标记，用于表示该路由表条目的相关信息。U（表路由是活跃的）、G（表路由涉及到网关）及其他（man route）。
Metric：到达指定网络所需经过的跳数，也即需要经过多少个路由器才到大最终目的地（Linux内核未使用？）。
Ref：对该路由表条目引用的次数（Linux内核未使用？）。
Use：路由软件对该路由条目的查询次数，这个参数可以粗略衡量有多少数据流量去往指定的网络。
Iface：去往指定网络的数据包应该发送到的网络接口
一些例子
route add -net 192.168.0.23 netmask 255.255.255.0 dev eth0  //添加一条路由信息
route add default gw 192.168.0.1   //添加默认网关路由
一些脚本/etc/rc.d/init.d/network；/etc/sysconfig/network；/etc/sysconfig/network-scripts；/etc/sysconfig/networking/devices；都没有？？

///////////////////////////////////////////////////配置DNS解析器
将主机名和域名转换为IP地址；客户端向DNS服务器发送解析域名请求，DNS收到后使用IP地址进行响应。客户端向DNS服务器发送IP地址并请求对应的域名，称为反向DNS（reverse DNS），反向DNS有助于防止Internet上某些类型的安全攻击。解析（resolving）是将域名转换为IP地址或IP地址转换为域名的过程。
解析器（resolver）是DNS的客户端部分，可以向DNS服务器提交地址解析请求。可以使用Internet上任意一台可访问的DNS服务器，但DNS服务器离所在网段越近，解析请求速度就越快。resolv.conf最多包含3个DNS服务器，按顺序解析。
shengyan@LIZZIE:/etc$ cat resolv.conf
domain MyGroup    //主机所在域的域名，可以引导解析器更精确的确定应该解析什么主机名。
nameserver 202.195.48.11
nameserver 202.195.48.10
DNS工具：dnsquery、nslookup、dig、whois、host

/etc/hosts文件
将IP地址和对应的域名存储在该文件中。默认下，他只包含主机名和自身的主机名。若小型网络，则可以创建hosts文件，在其中包含每个主机名及其IP地址，就可以不需要使用DNS服务器解析了。（通过网络连接要慢得多）。但对于非本地域名的解析请求还是要提交给DNS服务器。

一种是在/etc/host.conf中指定解析器将主机名转换为IP地址时使用资源的顺序。
shengyan@LIZZIE:/etc$ cat host.conf
# The "order" line is only used by old versions of the C library.
order hosts,bind   //表示Linux解析器首先检查/etc/hosts，如果没找到则根据resolv.conf中的配置来查询DNS（使用的是BIND协议）
multi on

二种是/etc/nsswitch.conf，不仅仅是解析器，还可以告知解析器应该向何处寻求解析IP地址和域名的对应关系。
行格式：hosts： files nisplus dns
shengyan@LIZZIE:/etc$ cat nsswitch.conf 
# /etc/nsswitch.conf
#
# Example configuration of GNU Name Service Switch functionality.
# If you have the `glibc-doc-reference' and `info' packages installed, try:
# `info libc "Name Service Switch"' for information about this file.

passwd:         compat
group:          compat
shadow:         compat

hosts:          files mdns4_minimal [NOTFOUND=return] dns mdns4   //表明解析器先查/etc/hosts，后/etc/resolv.conf配置的DNS服务器
networks:       files

protocols:      db files
services:       db files
ethers:         db files
rpc:            db files

netgroup:       nis


之前的路由方式称为静态路由（static routing）————小型可靠稳定的网络
动态路由（dynamic routing）————使用专门的路由协议自动化地构建和修改路由表的过程。

路由协议分为内部和外部的。内部路由协议（Interior Routing Protocol）设计的目标是在统一组织的网络之间对数据包进行路由，对数据包的路由以数学模型为基础；外部路由协议（Exterior Routing Protocol）设计的目标是在不同组织控制的网络之间对数据包进行路由，对数据包的路由以管理策略为基础。
路由信息协议（RIP）：内部路由协议，routed守护进程
开放最短路径优先（Open Shortest Path First， OSPF）：内部路由协议，gated守护进程
边界网关协议（Border Gateway Protocol， BGP）：外部路由协议，国家范围的主干网络之间进行路由


配置DHCP服务器
DHCP自动化地为计算机提供IP地址和其他信息。对BOOTP协议是向后兼容的
/etc/dhcpd.conf（/etc/dhcp3/dhclient.conf）
shengyan@LIZZIE:/etc$ cat dhcp3/dhclient.conf 
# Configuration file for /sbin/dhclient, which is included in Debian's
#       dhcp3-client package.
#
# This is a sample configuration file for dhclient. See dhclient.conf's
#       man page for more information about the syntax of this file
#       and a more comprehensive list of the parameters understood by
#       dhclient.
#
# Normally, if the DHCP server provides reasonable information and does
#       not leave anything out (like the domain name, for example), then
#       few changes must be made to this file, if any.
#

send host-name "<hostname>";
#send dhcp-client-identifier 1:0:a0:24:ab:fb:9c;
#send dhcp-lease-time 3600;
#supersede domain-name "fugue.com home.vix.com";
#prepend domain-name-servers 127.0.0.1;
request subnet-mask, broadcast-address, time-offset, routers,
        domain-name, domain-name-servers, host-name,
        netbios-name-servers, netbios-scope;
#require subnet-mask, domain-name-servers;
timeout 30;
#retry 60;
#reboot 10;
#select-timeout 5;
#initial-interval 2;
#script "/etc/dhcp3/dhclient-script";
#media "-link0 -link1 -link2", "link0 link1";
#reject 192.33.137.209;

#alias {
#  interface "eth0";
#  fixed-address 192.5.5.213;
#  option subnet-mask 255.255.255.255;
#}

#lease {
#  interface "eth0";
#  fixed-address 192.33.137.200;
#  medium "link0 link1";
#  option host-name "andare.swiftmedia.com";
#  option subnet-mask 255.255.255.0;
#  option broadcast-address 192.33.137.255;
#  option routers 192.33.137.250;
#  option domain-name-servers 127.0.0.1;
#  renew 2 2000/1/12 00:00:01;
#  rebind 2 2000/1/12 00:00:01;
#  expire 2 2000/1/12 00:00:01;
#}


配置打印服务
CUPS（Common UNIX Printing System 1.2.8）Web界面管理为http://localhost:631/
配置文件/etc/cups/cupsd.conf
/etc/printcap打印队列，/etc/cups/printers.conf
使用lpc等等等等

／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／系统管理与内核管理
备份Linux系统
对系统中属性集保留一个副本。
备份计划：何时，以何种方式对文件进行备份，存储（以及在需要的时候进行恢复）的整个过程。哪些文件需要备份；谁来备份文件；文件在何处；怎样进行备份；是否必须在特定的时间间隔内恢复数据。
备份和恢复
定义备份级别：0级备份级别（完全备份），1级备份（差分备份），2级备份（也是种差分备份），遵循的是增量备份，时间越来越短。在恢复时也是这个0，1，2顺序进行恢复

dd：该命令可以在任意两个设备或文件之间进行“数据转储”的操作
tar、cpio、dump、restore。。。。

系统日志/var/log/messages
syslogd，klogd守护进程；/etc/syslog.conf

Linux中的时间机制
硬件时钟——>内部时钟（系统时钟）
date：查看系统时钟记录的当前日期和时间
hwclock：查看硬件时钟中记录的当前日期和时间。
与Internet连接的大型网络，使用网络时间服务器（network time server）：借助于原子时钟或无线时钟保持并维护一个高度精确的时间机制。Linux系统可以定期的使用网络时间协议（Network Time Protocol，NTP）连接到网络时间服务器并调整自身的系统时钟。

使用/proc文件系统进行内核管理
查询/proc中某文件时，Linux回应的是进程状态、内存或其他资源的实况信息，这些信息是随时间变化的
cat /proc/meminfo   //获取内存容量及其使用状况的相关信息

也可以想/proc中的某些文件写入信息。/proc/sys/fs/file-max写入数值来改变Linux中同时可用的文件句柄数（file handle：是种内部存储机制，Linux通过文件句柄打开并使用文件）
cat /proc/sys/fs/file-max
echo 48000 > /proc/sys/fs/file-max
sysctl:查看和更新很多内核参数值

使用内核模块
Linux能在无需重启计算机的前提下添加或移除内核的某些部分。Linux内核模块（kernel module）是指那些包含程序代码的文件，这些文件可以根据需要加载到内核中或从内核中移除。Linux的很多功能己可以创建为内核中内置的组成部分，也可以实现为根据实际需要添加或移除的内核模块。
lsmod：列出安装在Linux内核中的所有模块
modinfo：获取某模块的更多信息
shengyan@LIZZIE:/etc$ modinfo ext3
filename:       /lib/modules/2.6.20-16-generic/kernel/fs/ext3/ext3.ko
license:        GPL
description:    Second Extended Filesystem with journaling extensions
author:         Remy Card, Stephen Tweedie, Andrew Morton, Andreas Dilger, Theodore Ts'o and others
srcversion:     7F25BA0D0A1B9A2A8F43C49
depends:        mbcache,jbd
vermagic:       2.6.20-16-generic SMP mod_unload 586 

添加或移除模块
modprobe：在加载某模块的同时自动加载所有其他必要的先决支持模块；modprobe依赖于depmod命令创建的模块依赖关系，该命令在系统每次启动时都会执行，也可使用insmod命令向运行中的Linux内核添加模块，但不能自动加载其他支持模块
rmmod：从内核中移除模块，模块参数（module parameter）提供了模块定位系统资源所需的信息

定位模块
模块文件存储在/lib/modules/version/kernel

一些配置文件/etc/modprobe.conf，/etc/conf.modules

内核组件的配置和升级
重新编译内核
config，menuconfig，xconfig
make config   //or menuconfig or xconfig
make mrproper
make dep; make bzImage; make modules; make modules_install
cd /boot
cp /usr/src/...../bzImage  ./vmlinuz-new
ln -s vmlinuz vmlinuz-new

