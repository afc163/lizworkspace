1、file：显示文件类型和用途
2、slocate：显示存在于系统中和指定条件匹配的文件和目录名
3、touch：创建空文件或者更新已存在文件的时间戳
4、updatedb：创建或者更新文件或者目录名的索引，这些索引会被slocate使用（需要root帐户运行）
5、zcat：显示压缩文件的内容

6、gdmsetup：启动用于配置图形登录界面的图形界面工具
7、startx：从命令行中启动X windows 会话
8、switchdesk：驱动桌面界面切换的图形界面工具
9、env：启动一个程序，并设置该程序需要使用，但当前尚未在环境中设置的环境变量
10、export：使得新创建的环境变量可供同一环境中运行的其他程序使用

11、lpoptions：为lpr命令设置选项集，以便于将来使用——lpoptions -P hplj -o media=legal -o jobsheets=confidential
12、lpr：打印文件或来自管道的输入
13、tee：将程序的输出发送到某文件的同时也在屏幕上显示——sort data_file | tee sorted_data
14、cpio：创建档案文件，也可以读取有tar命令创建的archive文件——cpio -idev < /dev/fd0
15、id：显示当前有效的UID、GID和有效UID所属的组

16、logname：显示登录到系统的用户名（可能和whoami、id命令显示的当前有效UID不同）
17、newgrp：与su类似，用于临时改变登录用户的有效组，该命令针对组而不针对用户
18、stat：显示和inode对应的文件和目录的信息，如文件大小，操作，上次访问和修改时间，存储文件的设备
19、umask：当创建新的文件和目录时，阻止默认的文件权限值
20、vigr:安全的编辑/etc/group

21、vipw：安全的编辑/etc/passwd
22、sort：排序文本
23、uniq：在一个已派好序的文本文件中删除重复行
24：diff：用于找出两个文本文件之间的不同之处
25、cmp：快速检查两个文件内容是否相同，若不同显示第一处不同所在的位置

26、ispell/aspell：拼写检查程序
文本过滤命令
27、cut：从文件每一行中删除部分内容（字段）
28、expand：将制表符替换成空格
29、fmt：格式化文本文件（使空格标准化，设置行宽，行缩进值的大小等）
30、join：根据匹配字段将两个不同文件中的行合并

31、nl：给文件中的每一行添加行号
32、od：以数字格式（如十六进制）显示文件内容
33、paste：将两个文件中的行合并
34、split：将一个文件分成两个或更多小文件
35、tac：反转文件中每一行的顺序（最先输出文件的最后一行），tac为cat的反转

36、tr：将字符替换为另一个字符
37、unexpand：将空格替换成制表符
38、comm：判断两个已排好序的文本是否相同


1、grep -l python * | xargs rm -f
NAME
grep, egrep, fgrep, rgrep - print lines matching a pattern

SYNOPSIS
grep [options] PATTERN [FILE...]
grep [options] [-e PATTERN | -f FILE] [FILE...]

DESCRIPTION
grep searches the named input FILEs (or standard input if no files are
named, or the file name - is given) for lines containing a match to the
given PATTERN. By default, grep prints the matching lines.

In addition, three variant programs egrep, fgrep and rgrep are avail‐
able. egrep is the same as grep -E. fgrep is the same as grep -F.
rgrep is the same as grep -r.

OPTIONS
-A NUM, --after-context=NUM
Print NUM lines of trailing context after matching lines.
Places a line containing -- between contiguous groups of
matches.

-a, --text
Process a binary file as if it were text; this is equivalent to
the --binary-files=text option.

-B NUM, --before-context=NUM
Print NUM lines of leading context before matching lines.
Places a line containing -- between contiguous groups of
matches.

-b, --byte-offset
Print the byte offset within the input file before each line of
output.

--binary-files=TYPE
If the first few bytes of a file indicate that the file contains
binary data, assume that the file is of type TYPE. By default,
TYPE is binary, and grep normally outputs either a one-line mes‐
sage saying that a binary file matches, or no message if there
is no match. If TYPE is without-match, grep assumes that a
binary file does not match; this is equivalent to the -I option.
If TYPE is text, grep processes a binary file as if it were
text; this is equivalent to the -a option. Warning: grep
--binary-files=text might output binary garbage, which can have
nasty side effects if the output is a terminal and if the termi‐
nal driver interprets some of it as commands.

-C NUM, --context=NUM
Print NUM lines of output context. Places a line containing --
between contiguous groups of matches.

-c, --count
Suppress normal output; instead print a count of matching lines
for each input file. With the -v, --invert-match option (see
below), count non-matching lines.

--colour[=WHEN], --color[=WHEN]
Surround the matching string with the marker find in GREP_COLOR
environment variable. WHEN may be ‘never’, ‘always’, or ‘auto’

-D ACTION, --devices=ACTION
If an input file is a device, FIFO or socket, use ACTION to pro‐
cess it. By default, ACTION is read, which means that devices
are read just as if they were ordinary files. If ACTION is
skip, devices are silently skipped.

-d ACTION, --directories=ACTION
If an input file is a directory, use ACTION to process it. By
default, ACTION is read, which means that directories are read
just as if they were ordinary files. If ACTION is skip, direc‐
tories are silently skipped. If ACTION is recurse, grep reads
all files under each directory, recursively; this is equivalent
to the -r option.

-E, --extended-regexp
Interpret PATTERN as an extended regular expression (see below).

-e PATTERN, --regexp=PATTERN
Use PATTERN as the pattern; useful to protect patterns beginning
with -.

-F, --fixed-strings
Interpret PATTERN as a list of fixed strings, separated by new‐
lines, any of which is to be matched.

-f FILE, --file=FILE
Obtain patterns from FILE, one per line. The empty file con‐
tains zero patterns, and therefore matches nothing.

-G, --basic-regexp
Interpret PATTERN as a basic regular expression (see below).
This is the default.

-H, --with-filename
Print the filename for each match.

-h, --no-filename
Suppress the prefixing of filenames on output when multiple
files are searched.

--help Output a brief help message.

-I Process a binary file as if it did not contain matching data;
this is equivalent to the --binary-files=without-match option.

-i, --ignore-case
Ignore case distinctions in both the PATTERN and the input
files.

-L, --files-without-match
Suppress normal output; instead print the name of each input
file from which no output would normally have been printed. The
scanning will stop on the first match.

-l, --files-with-matches
Suppress normal output; instead print the name of each input
file from which output would normally have been printed. The
scanning will stop on the first match.

--label=LABEL
Displays input actually coming from standard input as input com‐
ing from file LABEL. This is especially useful for tools like
zgrep, e.g. gzip -cd foo.gz |grep --label=foo something

--line-buffered
Use line buffering, it can be a performance penalty.

-m NUM, --max-count=NUM
Stop reading a file after NUM matching lines. If the input is
standard input from a regular file, and NUM matching lines are
output, grep ensures that the standard input is positioned to
just after the last matching line before exiting, regardless of
the presence of trailing context lines. This enables a calling
process to resume a search. When grep stops after NUM matching
lines, it outputs any trailing context lines. When the -c or
--count option is also used, grep does not output a count
greater than NUM. When the -v or --invert-match option is also
used, grep stops after outputting NUM non-matching lines.

--mmap If possible, use the mmap(2) system call to read input, instead
of the default read(2) system call. In some situations, --mmap
yields better performance. However, --mmap can cause undefined
behavior (including core dumps) if an input file shrinks while
grep is operating, or if an I/O error occurs.

-n, --line-number
Prefix each line of output with the line number within its input
file.

-o, --only-matching
Show only the part of a matching line that matches PATTERN.

-P, --perl-regexp
Interpret PATTERN as a Perl regular expression.

-q, --quiet, --silent
Quiet; do not write anything to standard output. Exit immedi‐
ately with zero status if any match is found, even if an error
was detected. Also see the -s or --no-messages option.

-R, -r, --recursive
Read all files under each directory, recursively; this is equiv‐
alent to the -d recurse option.

--include=PATTERN
Recurse in directories only searching file matching PATTERN.

--exclude=PATTERN
Recurse in directories skip file matching PATTERN.

-s, --no-messages
Suppress error messages about nonexistent or unreadable files.
Portability note: unlike GNU grep, traditional grep did not con‐
form to POSIX.2, because traditional grep lacked a -q option and
its -s option behaved like GNU grep’s -q option. Shell scripts
intended to be portable to traditional grep should avoid both -q
and -s and should redirect output to /dev/null instead.

-U, --binary
Treat the file(s) as binary. By default, under MS-DOS and MS-
Windows, grep guesses the file type by looking at the contents
of the first 32KB read from the file. If grep decides the file
is a text file, it strips the CR characters from the original
file contents (to make regular expressions with ^ and $ work
correctly). Specifying -U overrules this guesswork, causing all
files to be read and passed to the matching mechanism verbatim;
if the file is a text file with CR/LF pairs at the end of each
line, this will cause some regular expressions to fail. This
option has no effect on platforms other than MS-DOS and MS-Win‐
dows.

-u, --unix-byte-offsets
Report Unix-style byte offsets. This switch causes grep to
report byte offsets as if the file were Unix-style text file,
i.e. with CR characters stripped off. This will produce results
identical to running grep on a Unix machine. This option has no
effect unless -b option is also used; it has no effect on plat‐
forms other than MS-DOS and MS-Windows.

-V, --version
Print the version number of grep to standard error. This ver‐
sion number should be included in all bug reports (see below).

-v, --invert-match
Invert the sense of matching, to select non-matching lines.

-w, --word-regexp
Select only those lines containing matches that form whole
words. The test is that the matching substring must either be
at the beginning of the line, or preceded by a non-word con‐
stituent character. Similarly, it must be either at the end of
the line or followed by a non-word constituent character. Word-
constituent characters are letters, digits, and the underscore.

-x, --line-regexp
Select only those matches that exactly match the whole line.

-y Obsolete synonym for -i.

-Z, --null
Output a zero byte (the ASCII NUL character) instead of the
character that normally follows a file name. For example, grep
-lZ outputs a zero byte after each file name instead of the
usual newline. This option makes the output unambiguous, even
in the presence of file names containing unusual characters like
newlines. This option can be used with commands like find
-print0, perl -0, sort -z, and xargs -0 to process arbitrary
file names, even those that contain newline characters.

-z, --null-data
Treat the input as a set of lines, each terminated by a zero
byte (the ASCII NUL character) instead of a newline. Like the
-Z or --null option, this option can be used with commands like
sort -z to process arbitrary file names.

REGULAR EXPRESSIONS
A regular expression is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic expres‐
sions, by using various operators to combine smaller expressions.

grep understands three different versions of regular expression syntax:
“basic,” “extended,” and “perl.” In GNU grep, there is no difference
in available functionality using either of the first two syntaxes. In
other implementations, basic regular expressions are less powerful.
The following description applies to extended regular expressions; dif‐
ferences for basic regular expressions are summarized afterwards. Perl
regular expressions add additional functionality, but the implementa‐
tion used here is undocumented and is not compatible with other grep
implementations.

The fundamental building blocks are the regular expressions that match
a single character. Most characters, including all letters and digits,
are regular expressions that match themselves. Any metacharacter with
special meaning may be quoted by preceding it with a backslash.

A bracket expression is a list of characters enclosed by [ and ]. It
matches any single character in that list; if the first character of
the list is the caret ^ then it matches any character not in the list.
For example, the regular expression [0123456789] matches any single
digit.

Within a bracket expression, a range expression consists of two charac‐
ters separated by a hyphen. It matches any single character that sorts
between the two characters, inclusive, using the locale’s collating
sequence and character set. For example, in the default C locale,
[a-d] is equivalent to [abcd]. Many locales sort characters in dictio‐
nary order, and in these locales [a-d] is typically not equivalent to
[abcd]; it might be equivalent to [aBbCcDd], for example. To obtain
the traditional interpretation of bracket expressions, you can use the
C locale by setting the LC_ALL environment variable to the value C.

Finally, certain named classes of characters are predefined within
bracket expressions, as follows. Their names are self explanatory, and
they are [:alnum:], [:alpha:], [:cntrl:], [:digit:], [:graph:],
[:lower:], [:print:], [:punct:], [:space:], [:upper:], and [:xdigit:].
For example, [[:alnum:]] means [0-9A-Za-z], except the latter form
depends upon the C locale and the ASCII character encoding, whereas the
former is independent of locale and character set. (Note that the
brackets in these class names are part of the symbolic names, and must
be included in addition to the brackets delimiting the bracket list.)
Most metacharacters lose their special meaning inside lists. To
include a literal ] place it first in the list. Similarly, to include
a literal ^ place it anywhere but first. Finally, to include a literal
- place it last.

The period . matches any single character. The symbol \w is a synonym
for [[:alnum:]] and \W is a synonym for [^[:alnum]].

The caret ^ and the dollar sign $ are metacharacters that respectively
match the empty string at the beginning and end of a line. The symbols
\<> respectively match the empty string at the beginning and end
of a word. The symbol \b matches the empty string at the edge of a
word, and \B matches the empty string provided it’s not at the edge of
a word.

A regular expression may be followed by one of several repetition oper‐
ators:
? The preceding item is optional and matched at most once.
* The preceding item will be matched zero or more times.
+ The preceding item will be matched one or more times.
{n} The preceding item is matched exactly n times.
{n,} The preceding item is matched n or more times.
{n,m} The preceding item is matched at least n times, but not more
than m times.

Two regular expressions may be concatenated; the resulting regular
expression matches any string formed by concatenating two substrings
that respectively match the concatenated subexpressions.

Two regular expressions may be joined by the infix operator |; the
resulting regular expression matches any string matching either subex‐
pression.

Repetition takes precedence over concatenation, which in turn takes
precedence over alternation. A whole subexpression may be enclosed in
parentheses to override these precedence rules.

The backreference \n, where n is a single digit, matches the substring
previously matched by the nth parenthesized subexpression of the regu‐
lar expression.

In basic regular expressions the metacharacters ?, +, {, |, (, and )
lose their special meaning; instead use the backslashed versions \?,
\+, \{, \|, \(, and \).

Traditional egrep did not support the { metacharacter, and some egrep
implementations support \{ instead, so portable scripts should avoid {
in egrep patterns and should use [{] to match a literal {.

GNU egrep attempts to support traditional usage by assuming that { is
not special if it would be the start of an invalid interval specifica‐
tion. For example, the shell command egrep ��’{1��’ searches for the two-
character string {1 instead of reporting a syntax error in the regular
expression. POSIX.2 allows this behavior as an extension, but portable
scripts should avoid it.

ENVIRONMENT VARIABLES
grep’s behavior is affected by the following environment variables.

A locale LC_foo is specified by examining the three environment vari‐
ables LC_ALL, LC_foo, LANG, in that order. The first of these vari‐
ables that is set specifies the locale. For example, if LC_ALL is not
set, but LC_MESSAGES is set to pt_BR, then Brazilian Portuguese is used
for the LC_MESSAGES locale. The C locale is used if none of these
environment variables are set, or if the locale catalog is not
installed, or if grep was not compiled with national language support
(NLS).

GREP_OPTIONS
This variable specifies default options to be placed in front of
any explicit options. For example, if GREP_OPTIONS is
��’--binary-files=without-match --directories=skip��’, grep behaves
as if the two options --binary-files=without-match and --direc��‐
tories=skip had been specified before any explicit options.
Option specifications are separated by whitespace. A backslash
escapes the next character, so it can be used to specify an
option containing whitespace or a backslash.

GREP_COLOR
Specifies the marker for highlighting.

LC_ALL, LC_COLLATE, LANG
These variables specify the LC_COLLATE locale, which determines
the collating sequence used to interpret range expressions like
[a-z].

LC_ALL, LC_CTYPE, LANG
These variables specify the LC_CTYPE locale, which determines
the type of characters, e.g., which characters are whitespace.

LC_ALL, LC_MESSAGES, LANG
These variables specify the LC_MESSAGES locale, which determines
the language that grep uses for messages. The default C locale
uses American English messages.

POSIXLY_CORRECT
If set, grep behaves as POSIX.2 requires; otherwise, grep
behaves more like other GNU programs. POSIX.2 requires that
options that follow file names must be treated as file names; by
default, such options are permuted to the front of the operand
list and are treated as options. Also, POSIX.2 requires that
unrecognized options be diagnosed as “illegal”, but since they
are not really against the law the default is to diagnose them
as “invalid”. POSIXLY_CORRECT also disables _N_GNU_nonop��‐
tion_argv_flags_, described below.

_N_GNU_nonoption_argv_flags_
(Here N is grep’s numeric process ID.) If the ith character of
this environment variable’s value is 1, do not consider the ith
operand of grep to be an option, even if it appears to be one.
A shell can put this variable in the environment for each com‐
mand it runs, specifying which operands are the results of file
name wildcard expansion and therefore should not be treated as
options. This behavior is available only with the GNU C
library, and only when POSIXLY_CORRECT is not set.

2、find . -mtime 30 | xargs rm -f；find . -atime 30 | xargs rm -f

3、rm 和 shred的区别

4、uname：print system information
uname [OPTION]...
Print certain system information. With no OPTION, same as -s.

-a, --all
print all information, in the following order, except omit -p and -i if unknown:

-s, --kernel-name
print the kernel name

-n, --nodename
print the network node hostname

-r, --kernel-release
print the kernel release

-v, --kernel-version
print the kernel version

-m, --machine
print the machine hardware name

-p, --processor
print the processor type or "unknown"

-i, --hardware-platform
print the hardware platform or "unknown"

-o, --operating-system
print the operating system

--help display this help and exit

--version
output version information and exit

5、hostid：print the numeric identifier for the current host
hostid
hostid OPTION
Print the numeric identifier (in hexadecimal) for the current host.
--help display this help and exit

--version
output version information and exit

6、hostname：show or set the system’s host name
dnsdomainname - show the system’s DNS domain name

hostname [-v] [-a] [--alias] [-d] [--domain] [-f] [--fqdn] [-i] [--ipaddress] [--long] [-s] [--short] [-y] [--yp] [--nis]

hostname [-v] [-F filename] [--file filename] [hostname]

hostname [-v] [-h] [--help] [-V] [--version]

dnsdomainname [-v]

DESCRIPTION
Hostname is used to either set or display the current host or domain name of the system. This name is used by many of the networking programs to identify the machine. The domain name is also used by NIS/YP.

GET NAME
When called without any arguments, the program displays the currentnames:

hostname will print the name of the system as returned by the gethostname(2) function.

dnsdomainname will print the domain part of the FQDN (Fully Qualified Domain Name). The complete FQDN of the system is returned with hostname --fqdn.

SET NAME
When called with one argument or with the --file option, the set the host name or the NIS/YP domain name.
Note, that only the super-user can change the names.
It is not possible to set the FQDN or the DNS domain name with the dns domainname command (see THE FQDN below).
The host name is usually set once at system startup in /etc/rc.d/rc.inet1 or /etc/init.d/boot (normally by reading the contents of a file which contains the host name, e.g. /etc/hostname).

THE FQDN
You can’t change the FQDN (as returned by hostname --fqdn) or the DNS domain name (as returned by dnsdomainname) with this command. The FQDN of the system is the name that the resolver(3) returns for the host name.
Technically: The FQDN is the name gethostbyname(2) returns for the hostname returned by gethostname(2). The DNS domain name is the part after the first dot.
Therefore it depends on the configuration (usually in /etc/host.conf) how you can change it. Usually (if the hosts file is parsed before DNS or NIS) you can change it in /etc/hosts.

OPTIONS
-a, --alias
Display the alias name of the host (if used).

-d, --domain
Display the name of the DNS domain. Don’t use the command domainname to get the DNS domain name because it will show the NIS domain name and not the DNS domain name. Use dnsdomainname instead.

-F, --file filename
Read the host name from the specified file. Comments (lines starting with a ‘#’) are ignored.

-f, --fqdn, --long
Display the FQDN (Fully Qualified Domain Name). A FQDN consists of a short host name and the DNS domain name. Unless you are using bind or NIS for host lookups you can change the FQDN and the DNS domain name (which is part of the FQDN) in the /etc/hosts file.

-h, --help
Print a usage message and exit.

-i, --ip-address
Display the network address(es) of the host.

-s, --short
Display the short host name. This is the host name cut at the first dot.

-V, --version
Print version information on standard output and exit successfully.

-v, --verbose
Be verbose and tell what’s going on.

-y, --yp, --nis
Display the NIS domain name. If a parameter is given (or --filename ) then root can also set a new NIS domain.

NOTES
The address families hostname tries when looking up the FQDN, aliases and network addresses of the host are determined by the configuration of your resolver. For instance, on GNU Libc systems, the resolver can be instructed to try IPv6 lookups first by using the inet6 option in /etc/resolv.conf.

FILES
/etc/hosts
