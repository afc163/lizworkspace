.. _yourwidgets:


自定义组件
===============================================


为何要以组件形式
------------------------
将JS代码组件化的好处:
 #. 提高代码复用;
 #. 模块间保持独立, 不会导致多个开发人员合作时产生的冲突;
 #. 封装性好, 只提供API接口给外部调用, 非常OO;
 #. 其他的...


Kissy 中, 通过 ``add( name, fn)`` 方法来添加新的模块, 这在 Kissy 内部, 代码也是这么组织的. 所以如果你想要扩展 Kissy , 建议你采用这种形式.


下面通过个小例子来说明如何开发自定义组件.



组件开发示例
-------------------
在淘宝交易结束前有个评价环节, 里面有一个星星打分功能, 见 `demo <demo/yourwidgets.html>`_  , 在这里就把这个打分做成一个小Kissy组件.

完整步骤:
 #. 首先, 想好组件的名字, 见名知意, 模块名字统一小写, 而暴露给外部的组件名称使用单词首字母大写, 如 ``StarRating``;
 #. 通过 ``KISSY.add('starrating', function(S){});`` 加入新模块到 KISSY中, 这里也可以使用 ``KISSY.app('XXX');`` 创建特定的应用, 然后用 ``XXX.add('starrating', function(S){});`` 给特定应用 XXX 添加一个模块;
 #. 接下来是声明一些模块内的公共变量, 像 ``S.DOM S.Event`` 都会用到, 另外一些如组件自己的 class 钩子;
 #. 默认的配置信息, ``defaultConfig``, 提供了使用者如果没有设置时的默认值;
 #. ``function StarRating(obj, cfg){} KISSY.StarRating = StarRating;`` 定义 ``StarRating`` 并建立引用;
 #. 在 ``StarRating()`` 中处理自身变量及配置信息等, 或者做一些判断等;
 #. 通过 ``S.augment(StarRating, {});`` 添加属性及方法, 每个方法在注释中写明含义, 入口参数及其类型. 另外, 开发者需要想好哪些属性/方法需要对外提供及命名方式如何等. 在这个例子中, 只添加了 ``_init`` 私有方法, 构建所需DOM, 绑定事件;
 #. 最后, 在使用时只需要创建一个对象即可, 如, ``new S.StarRating('#J_Rating', {})``;


.. note::

   关于组件的开发规则, 以前也有讨论过:

   * 接口/公共方法的确定;
   * 尺寸形状的命名: 采用对象形式构成, 如{height: 100, width: 100};
   * 缩略语: 变量名如有出现常用的名字有固定且大家都知道的缩略语, 则尽可能用缩略语代替原单词, 保持整个变量简短;
   * 配置参数: 提供默认参数, 且在用户设定之后的错误参数给出提示或者采取默认行为;
   * 选择器: 传给组件的选择器, 如果有多个则组件需要支持处理多个, 尽可能地支持批量;
   

完整代码:

.. literalinclude:: demo/starscore.js
   :language: javascript
   :lines: 7-


通过上面的介绍, 在动手写 Kissy 组件之前, 还需要了解一下 Kissy组件的开发流程 [1]_ 相信会对你有用的. 

多多练习, 逐渐深入! :ref:`下一步 <nextstep>` ...



.. rubric:: 参考链接

.. [1] `组件开发流程 <http://kissyteam.github.com/kissy/docs/workflow.html>`_ ;
